/*! For license information please see leftMenu.bundle.js.LICENSE.txt */
(()=>{var e={757:(e,t,n)=>{e.exports=n(666)},669:(e,t,n)=>{e.exports=n(609)},592:(e,t,n)=>{"use strict";var r=n(867),o=n(26),a=n(372),i=n(327),l=n(97),u=n(109),s=n(985),c=n(61);e.exports=function(e){return new Promise((function(t,n){var f=e.data,d=e.headers,p=e.responseType;r.isFormData(f)&&delete d["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",v=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";d.Authorization="Basic "+btoa(m+":"+v)}var y=l(e.baseURL,e.url);function g(){if(h){var r="getAllResponseHeaders"in h?u(h.getAllResponseHeaders()):null,a={data:p&&"text"!==p&&"json"!==p?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h};o(t,n,a),h=null}}if(h.open(e.method.toUpperCase(),i(y,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,"onloadend"in h?h.onloadend=g:h.onreadystatechange=function(){h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))&&setTimeout(g)},h.onabort=function(){h&&(n(c("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){n(c("Network Error",e,null,h)),h=null},h.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,e.transitional&&e.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var b=(e.withCredentials||s(y))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;b&&(d[e.xsrfHeaderName]=b)}"setRequestHeader"in h&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:h.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(h.withCredentials=!!e.withCredentials),p&&"json"!==p&&(h.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),n(e),h=null)})),f||(f=null),h.send(f)}))}},609:(e,t,n)=>{"use strict";var r=n(867),o=n(849),a=n(321),i=n(185);function l(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var u=l(n(655));u.Axios=a,u.create=function(e){return l(i(u.defaults,e))},u.Cancel=n(263),u.CancelToken=n(972),u.isCancel=n(502),u.all=function(e){return Promise.all(e)},u.spread=n(713),u.isAxiosError=n(268),e.exports=u,e.exports.default=u},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,n)=>{"use strict";var r=n(263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(867),o=n(327),a=n(782),i=n(572),l=n(185),u=n(875),s=u.validators;function c(e){this.defaults=e,this.interceptors={request:new a,response:new a}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;void 0!==t&&u.assertOptions(t,{silentJSONParsing:s.transitional(s.boolean,"1.0.0"),forcedJSONParsing:s.transitional(s.boolean,"1.0.0"),clarifyTimeoutError:s.transitional(s.boolean,"1.0.0")},!1);var n=[],r=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(r=r&&t.synchronous,n.unshift(t.fulfilled,t.rejected))}));var o,a=[];if(this.interceptors.response.forEach((function(e){a.push(e.fulfilled,e.rejected)})),!r){var c=[i,void 0];for(Array.prototype.unshift.apply(c,n),c=c.concat(a),o=Promise.resolve(e);c.length;)o=o.then(c.shift(),c.shift());return o}for(var f=e;n.length;){var d=n.shift(),p=n.shift();try{f=d(f)}catch(e){p(e);break}}try{o=i(f)}catch(e){return Promise.reject(e)}for(;a.length;)o=o.then(a.shift(),a.shift());return o},c.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(l(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(l(r||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},97:(e,t,n)=>{"use strict";var r=n(793),o=n(303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},61:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},572:(e,t,n)=>{"use strict";var r=n(867),o=n(527),a=n(502),i=n(655);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return l(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(l(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},185:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],a=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],l=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function s(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))})),r.forEach(a,s),r.forEach(i,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(void 0,t[o])})),r.forEach(l,(function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))}));var c=o.concat(a).concat(i).concat(l),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===c.indexOf(e)}));return r.forEach(f,s),n}},26:(e,t,n)=>{"use strict";var r=n(61);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},527:(e,t,n)=>{"use strict";var r=n(867),o=n(655);e.exports=function(e,t,n){var a=this||o;return r.forEach(n,(function(n){e=n.call(a,e,t)})),e}},655:(e,t,n)=>{"use strict";var r=n(867),o=n(16),a=n(481),i={"Content-Type":"application/x-www-form-urlencoded"};function l(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,s={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=n(592)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(l(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(l(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,i=!n&&"json"===this.responseType;if(i||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw a(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){s.headers[e]=r.merge(i)})),e.exports=s},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},327:(e,t,n)=>{"use strict";var r=n(867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},985:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},16:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},109:(e,t,n)=>{"use strict";var r=n(867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},875:(e,t,n)=>{"use strict";var r=n(593),o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={},i=r.version.split(".");function l(e,t){for(var n=t?t.split("."):i,r=e.split("."),o=0;o<3;o++){if(n[o]>r[o])return!0;if(n[o]<r[o])return!1}return!1}o.transitional=function(e,t,n){var o=t&&l(t);function i(e,t){return"[Axios v"+r.version+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,l){if(!1===e)throw new Error(i(r," has been removed in "+t));return o&&!a[r]&&(a[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,l)}},e.exports={isOlderVersion:l,assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var a=r[o],i=t[a];if(i){var l=e[a],u=void 0===l||i(l,a,e);if(!0!==u)throw new TypeError("option "+a+" must be "+u)}else if(!0!==n)throw Error("Unknown option "+a)}},validators:o}},867:(e,t,n)=>{"use strict";var r=n(849),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function s(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isPlainObject:u,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:s,isStream:function(e){return l(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},679:(e,t,n)=>{"use strict";var r=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<i.length;++v){var y=i[v];if(!(a[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=d(n,y);try{s(t,y,g)}catch(e){}}}}return t}},826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},779:(e,t,n)=>{var r=n(826);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],a=0;a<t.length;a++)o.push(e(t[a],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return d(a(e,n),t,n)}(t,n,o)},e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var h=e[i],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var k=null!=m&&null!=h&&h!==m,E="+"===b||"*"===b,x="?"===b||"*"===b,S=n[2]||c,C=y||g;r.push({name:v||a++,prefix:m||"",delimiter:S,optional:x,repeat:E,partial:k,asterisk:!!w,pattern:C?s(C):w?".*":"[^"+u(S)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",l=t||{},u=(o||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)i+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),i+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(n)),t)}},703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),a=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,x=60106,S=60107,C=60108,_=60114,T=60109,P=60110,O=60112,N=60113,L=60120,R=60115,z=60116,I=60121,j=60128,M=60129,D=60130,A=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;E=F("react.element"),x=F("react.portal"),S=F("react.fragment"),C=F("react.strict_mode"),_=F("react.profiler"),T=F("react.provider"),P=F("react.context"),O=F("react.forward_ref"),N=F("react.suspense"),L=F("react.suspense_list"),R=F("react.memo"),z=F("react.lazy"),I=F("react.block"),F("react.scope"),j=F("react.opaque.id"),M=F("react.debug_trace_mode"),D=F("react.offscreen"),A=F("react.legacy_hidden")}var U,B="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var H=!1;function W(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function Q(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 22:return W(e.type._render,!1);case 1:return W(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case _:return"Profiler";case C:return"StrictMode";case N:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return q(e.type);case I:return q(e._render);case z:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function se(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _e=null,Te=null,Pe=null;function Oe(e){if(e=Jr(e)){if("function"!=typeof _e)throw Error(i(280));var t=e.stateNode;t&&(t=eo(t),_e(e.stateNode,e.type,t))}}function Ne(e){Te?Pe?Pe.push(e):Pe=[e]:Te=e}function Le(){if(Te){var e=Te,t=Pe;if(Pe=Te=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Re(e,t){return e(t)}function ze(e,t,n,r,o){return e(t,n,r,o)}function Ie(){}var je=Re,Me=!1,De=!1;function Ae(){null===Te&&null===Pe||(Ie(),Le())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(me){Ue=!1}function $e(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ve=!1,He=null,We=!1,Qe=null,qe={onError:function(e){Ve=!0,He=e}};function Ke(e,t,n,r,o,a,i,l,u){Ve=!1,He=null,$e.apply(qe,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ye(e)!==e)throw Error(i(188))}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var Ze,et,tt,nt,rt=!1,ot=[],at=null,it=null,lt=null,ut=new Map,st=new Map,ct=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function dt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":it=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":st.delete(t.pointerId)}}function ht(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=dt(t,n,r,o,a),null!==t&&null!==(t=Jr(t))&&et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Xr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void nt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){tt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&et(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){vt(e)&&n.delete(t)}function gt(){for(rt=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&Ze(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&vt(at)&&(at=null),null!==it&&vt(it)&&(it=null),null!==lt&&vt(lt)&&(lt=null),ut.forEach(yt),st.forEach(yt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,gt)))}function wt(e){function t(t){return bt(t,e)}if(0<ot.length){bt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&bt(at,e),null!==it&&bt(it,e),null!==lt&&bt(lt,e),ut.forEach(t),st.forEach(t),n=0;n<ct.length;n++)(r=ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)mt(n),null===n.blockedOn&&ct.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},xt={},St={};function Ct(e){if(xt[e])return xt[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in St)return xt[e]=n[t];return e}f&&(St=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var _t=Ct("animationend"),Tt=Ct("animationiteration"),Pt=Ct("animationstart"),Ot=Ct("transitionend"),Nt=new Map,Lt=new Map,Rt=["abort","abort",_t,"animationEnd",Tt,"animationIteration",Pt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ot,"transitionEnd","waiting","waiting"];function zt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Lt.set(r,t),Nt.set(r,o),s(o,[r])}}(0,a.unstable_now)();var It=8;function jt(e){if(0!=(1&e))return It=15,1;if(0!=(2&e))return It=14,2;if(0!=(4&e))return It=13,4;var t=24&e;return 0!==t?(It=12,t):0!=(32&e)?(It=11,32):0!=(t=192&e)?(It=10,t):0!=(256&e)?(It=9,256):0!=(t=3584&e)?(It=8,t):0!=(4096&e)?(It=7,4096):0!=(t=4186112&e)?(It=6,t):0!=(t=62914560&e)?(It=5,t):67108864&e?(It=4,67108864):0!=(134217728&e)?(It=3,134217728):0!=(t=805306368&e)?(It=2,t):0!=(1073741824&e)?(It=1,1073741824):(It=8,e)}function Mt(e,t){var n=e.pendingLanes;if(0===n)return It=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=It=15;else if(0!=(a=134217727&n)){var u=a&~i;0!==u?(r=jt(u),o=It):0!=(l&=a)&&(r=jt(l),o=It)}else 0!=(a=n&~i)?(r=jt(a),o=It):0!==l&&(r=jt(l),o=It);if(0===r)return 0;if(r=n&((0>(r=31-$t(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(jt(t),o<=It)return t;It=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-$t(t)),r|=e[n],t&=~o;return r}function Dt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function At(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?At(10,t):e;case 10:return 0===(e=Ft(192&~t))?At(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&0===(e=Ft(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-$t(t)]=n}var $t=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Vt(e)/Ht|0)|0},Vt=Math.log,Ht=Math.LN2,Wt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,qt=!0;function Kt(e,t,n,r){Me||Ie();var o=Gt,a=Me;Me=!0;try{ze(o,e,t,n,r)}finally{(Me=a)||Ae()}}function Yt(e,t,n,r){Qt(Wt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(qt)if((o=0==(4&t))&&0<ot.length&&-1<ft.indexOf(e))e=dt(null,e,t,n,r),ot.push(e);else{var a=Xt(e,t,n,r);if(null===a)o&&pt(e,r);else{if(o){if(-1<ft.indexOf(e))return e=dt(a,e,t,n,r),void ot.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=ht(at,e,t,n,r,o),!0;case"dragenter":return it=ht(it,e,t,n,r,o),!0;case"mouseover":return lt=ht(lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return ut.set(a,ht(ut.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,st.set(a,ht(st.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;pt(e,r)}Nr(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=Ce(r);if(null!==(o=Xr(o))){var a=Ye(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ge(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var Jt=null,Zt=null,en=null;function tn(){if(en)return en;var e,t,n=Zt,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return en=o.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function on(){return!1}function an(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rn:on,this.isPropagationStopped=on,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var ln,un,sn,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=an(cn),dn=o({},cn,{view:0,detail:0}),pn=an(dn),hn=o({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(ln=e.screenX-sn.screenX,un=e.screenY-sn.screenY):un=ln=0,sn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),mn=an(hn),vn=an(o({},hn,{dataTransfer:0})),yn=an(o({},dn,{relatedTarget:0})),gn=an(o({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=an(o({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),wn=an(o({},cn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function Cn(){return Sn}var _n=an(o({},dn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Tn=an(o({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=an(o({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),On=an(o({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=an(o({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Ln=[9,13,27,32],Rn=f&&"CompositionEvent"in window,zn=null;f&&"documentMode"in document&&(zn=document.documentMode);var In=f&&"TextEvent"in window&&!zn,jn=f&&(!Rn||zn&&8<zn&&11>=zn),Mn=String.fromCharCode(32),Dn=!1;function An(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function Vn(e,t,n,r){Ne(r),0<(t=Rr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Wn=null;function Qn(e){Sr(e,0)}function qn(e){if(X(Zr(e)))return e}function Kn(e,t){if("change"===e)return t}var Yn=!1;if(f){var Gn;if(f){var Xn="oninput"in document;if(!Xn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Xn="function"==typeof Jn.oninput}Gn=Xn}else Gn=!1;Yn=Gn&&(!document.documentMode||9<document.documentMode)}function Zn(){Hn&&(Hn.detachEvent("onpropertychange",er),Wn=Hn=null)}function er(e){if("value"===e.propertyName&&qn(Wn)){var t=[];if(Vn(t,Wn,e,Ce(e)),e=Qn,Me)e(t);else{Me=!0;try{Re(e,t)}finally{Me=!1,Ae()}}}}function tr(e,t,n){"focusin"===e?(Zn(),Wn=n,(Hn=t).attachEvent("onpropertychange",er)):"focusout"===e&&Zn()}function nr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Wn)}function rr(e,t){if("click"===e)return qn(t)}function or(e,t){if("input"===e||"change"===e)return qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ir=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ir.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function cr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?cr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,mr=null,vr=null,yr=!1;function gr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==hr||hr!==J(r)||(r="selectionStart"in(r=hr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Rr(mr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}zt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),zt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),zt(Rt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<br.length;wr++)Lt.set(br[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(Ke.apply(this,arguments),Ve){if(!Ve)throw Error(i(198));var c=He;Ve=!1,He=null,We||(We=!0,Qe=c)}}(r,t,void 0,e),e.currentTarget=null}function Sr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;xr(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;xr(o,l,s),a=u}}}if(We)throw e=Qe,We=!1,Qe=null,e}function Cr(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Or(t,e,2,!1),n.add(r))}var _r="_reactListening"+Math.random().toString(36).slice(2);function Tr(e){e[_r]||(e[_r]=!0,l.forEach((function(t){Er.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Er.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=to(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Or(a,e,o,t),i.add(l))}function Or(e,t,n,r){var o=Lt.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Yt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Xr(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{je(e,t,n)}finally{De=!1,Ae()}}((function(){var r=a,o=Ce(n),i=[];e:{var l=Nt.get(e);if(void 0!==l){var u=fn,s=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pn;break;case _t:case Tt:case Pt:u=gn;break;case Ot:u=On;break;case"scroll":u=pn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Tn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Fe(h,d))&&c.push(Lr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Xr(s)&&!s[Yr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Xr(s):null)&&(s!==(f=Ye(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=mn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:Zr(u),p=null==s?l:Zr(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,Xr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=zr(p))h++;for(p=0,m=d;m;m=zr(m))p++;for(;0<h-p;)c=zr(c),h--;for(;0<p-h;)d=zr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=zr(c),d=zr(d)}c=null}else c=null;null!==u&&Ir(i,l,u,c,!1),null!==s&&null!==f&&Ir(i,f,s,c,!0)}if("select"===(u=(l=r?Zr(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Kn;else if($n(l))if(Yn)v=or;else{v=nr;var y=tr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=rr);switch(v&&(v=v(e,r))?Vn(i,v,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&oe(l,"number",l.value)),y=r?Zr(r):window,e){case"focusin":($n(y)||"true"===y.contentEditable)&&(hr=y,mr=r,vr=null);break;case"focusout":vr=mr=hr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,gr(i,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":gr(i,n,o)}var g;if(Rn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?An(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(g=tn()):(Zt="value"in(Jt=o)?Jt.value:Jt.textContent,Un=!0)),0<(y=Rr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:y}),(g||null!==(g=Fn(n)))&&(b.data=g))),(g=In?function(e,t){switch(e){case"compositionend":return Fn(t);case"keypress":return 32!==t.which?null:(Dn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Rn&&An(e,t)?(e=tn(),en=Zt=Jt=null,Un=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Rr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Sr(i,t)}))}function Lr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Fe(e,n))&&r.unshift(Lr(e,a,o)),null!=(a=Fe(e,t))&&r.push(Lr(e,a,o))),e=e.return}return r}function zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ir(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Fe(n,a))&&i.unshift(Lr(n,u,l)):o||null!=(u=Fe(n,a))&&i.push(Lr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function jr(){}var Mr=null,Dr=null;function Ar(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,Br="function"==typeof clearTimeout?clearTimeout:void 0;function $r(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Vr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Wr=0,Qr=Math.random().toString(36).slice(2),qr="__reactFiber$"+Qr,Kr="__reactProps$"+Qr,Yr="__reactContainer$"+Qr,Gr="__reactEvents$"+Qr;function Xr(e){var t=e[qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[qr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[qr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Zr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function eo(e){return e[Kr]||null}function to(e){var t=e[Gr];return void 0===t&&(t=e[Gr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function ao(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function io(e,t){ro++,no[ro]=e.current,e.current=t}var lo={},uo=oo(lo),so=oo(!1),co=lo;function fo(e,t){var n=e.type.contextTypes;if(!n)return lo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function po(e){return null!=e.childContextTypes}function ho(){ao(so),ao(uo)}function mo(e,t,n){if(uo.current!==lo)throw Error(i(168));io(uo,t),io(so,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,q(t)||"Unknown",a));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||lo,co=uo.current,io(uo,e),io(so,so.current),!0}function go(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=vo(e,t,co),r.__reactInternalMemoizedMergedChildContext=e,ao(so),ao(uo),io(uo,e)):ao(so),io(so,n)}var bo=null,wo=null,ko=a.unstable_runWithPriority,Eo=a.unstable_scheduleCallback,xo=a.unstable_cancelCallback,So=a.unstable_shouldYield,Co=a.unstable_requestPaint,_o=a.unstable_now,To=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,Oo=a.unstable_UserBlockingPriority,No=a.unstable_NormalPriority,Lo=a.unstable_LowPriority,Ro=a.unstable_IdlePriority,zo={},Io=void 0!==Co?Co:function(){},jo=null,Mo=null,Do=!1,Ao=_o(),Fo=1e4>Ao?_o:function(){return _o()-Ao};function Uo(){switch(To()){case Po:return 99;case Oo:return 98;case No:return 97;case Lo:return 96;case Ro:return 95;default:throw Error(i(332))}}function Bo(e){switch(e){case 99:return Po;case 98:return Oo;case 97:return No;case 96:return Lo;case 95:return Ro;default:throw Error(i(332))}}function $o(e,t){return e=Bo(e),ko(e,t)}function Vo(e,t,n){return e=Bo(e),Eo(e,t,n)}function Ho(){if(null!==Mo){var e=Mo;Mo=null,xo(e)}Wo()}function Wo(){if(!Do&&null!==jo){Do=!0;var e=0;try{var t=jo;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),jo=null}catch(t){throw null!==jo&&(jo=jo.slice(e+1)),Eo(Po,Ho),t}finally{Do=!1}}}var Qo=k.ReactCurrentBatchConfig;function qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=oo(null),Yo=null,Go=null,Xo=null;function Jo(){Xo=Go=Yo=null}function Zo(e){var t=Ko.current;ao(Ko),e.type._context._currentValue=t}function ea(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ta(e,t){Yo=e,Xo=Go=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ri=!0),e.firstContext=null)}function na(e,t){if(Xo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Go){if(null===Yo)throw Error(i(308));Go=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Go=Go.next=t;return e._currentValue}var ra=!1;function oa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function la(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ua(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function sa(e,t,n,r){var a=e.updateQueue;ra=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=a.baseState,l=0,f=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:ra=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Il|=l,e.lanes=l,e.memoizedState=d}}function ca(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var fa=(new r.Component).refs;function da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pa={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=au(),o=iu(e),a=ia(r,o);a.payload=t,null!=n&&(a.callback=n),la(e,a),lu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=au(),o=iu(e),a=ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),la(e,a),lu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=au(),r=iu(e),o=ia(n,r);o.tag=2,null!=t&&(o.callback=t),la(e,o),lu(e,r,n)}};function ha(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,a))}function ma(e,t,n){var r=!1,o=lo,a=t.contextType;return"object"==typeof a&&null!==a?a=na(a):(o=po(t)?co:uo.current,a=(r=null!=(r=t.contextTypes))?fo(e,o):lo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function va(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pa.enqueueReplaceState(t,t.state,null)}function ya(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,oa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=na(a):(a=po(t)?co:uo.current,o.context=fo(e,a)),sa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pa.enqueueReplaceState(o,o.state,null),sa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ga=Array.isArray;function ba(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function wa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ka(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Du(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Bu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ba(e,t,n),r.return=e,r):((r=Au(n.type,n.key,n.props,null,e.mode,r)).ref=ba(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$u(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Fu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Bu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Au(t.type,t.key,t.props,null,e.mode,n)).ref=ba(e,null,t),n.return=e,n;case x:return(t=$u(t,e.mode,n)).return=e,t}if(ga(t)||$(t))return(t=Fu(t,e.mode,n,null)).return=e,t;wa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?n.type===S?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case x:return n.key===o?c(e,t,n,r):null}if(ga(n)||$(n))return null!==o?null:f(e,t,n,r,null);wa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ga(r)||$(r))return f(t,e=e.get(n)||null,r,o,null);wa(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=$(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,s))&&(l=a(g,l,v),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=a(g,l,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===S&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case E:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(a.type===S){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=ba(e,s,a),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}a.type===S?((r=Fu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Au(a.type,a.key,a.props,null,e.mode,u)).ref=ba(e,r,a),u.return=e,e=u)}return l(e);case x:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=$u(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Bu(a,e.mode,u)).return=e,e=r),l(e);if(ga(a))return m(e,r,a,u);if($(a))return v(e,r,a,u);if(c&&wa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,q(e.type)||"Component"))}return n(e,r)}}var Ea=ka(!0),xa=ka(!1),Sa={},Ca=oo(Sa),_a=oo(Sa),Ta=oo(Sa);function Pa(e){if(e===Sa)throw Error(i(174));return e}function Oa(e,t){switch(io(Ta,t),io(_a,e),io(Ca,Sa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(Ca),io(Ca,t)}function Na(){ao(Ca),ao(_a),ao(Ta)}function La(e){Pa(Ta.current);var t=Pa(Ca.current),n=pe(t,e.type);t!==n&&(io(_a,e),io(Ca,n))}function Ra(e){_a.current===e&&(ao(Ca),ao(_a))}var za=oo(0);function Ia(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ja=null,Ma=null,Da=!1;function Aa(e,t){var n=ju(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(Da){var t=Ma;if(t){var n=t;if(!Fa(e,t)){if(!(t=Vr(n.nextSibling))||!Fa(e,t))return e.flags=-1025&e.flags|2,Da=!1,void(ja=e);Aa(ja,n)}ja=e,Ma=Vr(t.firstChild)}else e.flags=-1025&e.flags|2,Da=!1,ja=e}}function Ba(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ja=e}function $a(e){if(e!==ja)return!1;if(!Da)return Ba(e),Da=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fr(t,e.memoizedProps))for(t=Ma;t;)Aa(e,t),t=Vr(t.nextSibling);if(Ba(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ma=Vr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ma=null}}else Ma=ja?Vr(e.stateNode.nextSibling):null;return!0}function Va(){Ma=ja=null,Da=!1}var Ha=[];function Wa(){for(var e=0;e<Ha.length;e++)Ha[e]._workInProgressVersionPrimary=null;Ha.length=0}var Qa=k.ReactCurrentDispatcher,qa=k.ReactCurrentBatchConfig,Ka=0,Ya=null,Ga=null,Xa=null,Ja=!1,Za=!1;function ei(){throw Error(i(321))}function ti(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ni(e,t,n,r,o,a){if(Ka=a,Ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?Pi:Oi,e=n(r,o),Za){a=0;do{if(Za=!1,!(25>a))throw Error(i(301));a+=1,Xa=Ga=null,t.updateQueue=null,Qa.current=Ni,e=n(r,o)}while(Za)}if(Qa.current=Ti,t=null!==Ga&&null!==Ga.next,Ka=0,Xa=Ga=Ya=null,Ja=!1,t)throw Error(i(300));return e}function ri(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xa?Ya.memoizedState=Xa=e:Xa=Xa.next=e,Xa}function oi(){if(null===Ga){var e=Ya.alternate;e=null!==e?e.memoizedState:null}else e=Ga.next;var t=null===Xa?Ya.memoizedState:Xa.next;if(null!==t)Xa=t,Ga=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ga=e).memoizedState,baseState:Ga.baseState,baseQueue:Ga.baseQueue,queue:Ga.queue,next:null},null===Xa?Ya.memoizedState=Xa=e:Xa=Xa.next=e}return Xa}function ai(e,t){return"function"==typeof t?t(e):t}function ii(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Ga,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,s=o;do{var c=s.lane;if((Ka&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,Ya.lanes|=c,Il|=c}s=s.next}while(null!==s&&s!==o);null===u?a=r:u.next=l,ar(r,t.memoizedState)||(Ri=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function li(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ar(a,t.memoizedState)||(Ri=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ui(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,Ha.push(t))),e)return n(t._source);throw Ha.push(t),Error(i(350))}function si(e,t,n,r){var o=_l;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Qa.current,s=u.useState((function(){return ui(o,t,n)})),c=s[1],f=s[0];s=Xa;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ya;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ar(l,e)){e=n(t._source),ar(f,e)||(c(e),e=iu(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-$t(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=iu(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(m,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:f}).dispatch=c=_i.bind(null,Ya,e),s.queue=e,s.baseQueue=null,f=ui(o,t,n),s.memoizedState=s.baseState=f),f}function ci(e,t,n){return si(oi(),e,t,n)}function fi(e){var t=ri();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:e}).dispatch=_i.bind(null,Ya,e),[t.memoizedState,e]}function di(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ya.updateQueue)?(t={lastEffect:null},Ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pi(e){return e={current:e},ri().memoizedState=e}function hi(){return oi().memoizedState}function mi(e,t,n,r){var o=ri();Ya.flags|=e,o.memoizedState=di(1|t,n,void 0,void 0===r?null:r)}function vi(e,t,n,r){var o=oi();r=void 0===r?null:r;var a=void 0;if(null!==Ga){var i=Ga.memoizedState;if(a=i.destroy,null!==r&&ti(r,i.deps))return void di(t,n,a,r)}Ya.flags|=e,o.memoizedState=di(1|t,n,a,r)}function yi(e,t){return mi(516,4,e,t)}function gi(e,t){return vi(516,4,e,t)}function bi(e,t){return vi(4,2,e,t)}function wi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ki(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,wi.bind(null,t,e),n)}function Ei(){}function xi(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Si(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ci(e,t){var n=Uo();$o(98>n?98:n,(function(){e(!0)})),$o(97<n?97:n,(function(){var n=qa.transition;qa.transition=1;try{e(!1),t()}finally{qa.transition=n}}))}function _i(e,t,n){var r=au(),o=iu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ya||null!==i&&i===Ya)Za=Ja=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(a.eagerReducer=i,a.eagerState=u,ar(u,l))return}catch(e){}lu(e,o,r)}}var Ti={readContext:na,useCallback:ei,useContext:ei,useEffect:ei,useImperativeHandle:ei,useLayoutEffect:ei,useMemo:ei,useReducer:ei,useRef:ei,useState:ei,useDebugValue:ei,useDeferredValue:ei,useTransition:ei,useMutableSource:ei,useOpaqueIdentifier:ei,unstable_isNewReconciler:!1},Pi={readContext:na,useCallback:function(e,t){return ri().memoizedState=[e,void 0===t?null:t],e},useContext:na,useEffect:yi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,mi(4,2,wi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var n=ri();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ri();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=_i.bind(null,Ya,e),[r.memoizedState,e]},useRef:pi,useState:fi,useDebugValue:Ei,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return yi((function(){var t=qa.transition;qa.transition=1;try{r(e)}finally{qa.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return pi(e=Ci.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ri();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},si(r,e,t,n)},useOpaqueIdentifier:function(){if(Da){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Wr++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Ya.mode)&&(Ya.flags|=516,di(5,(function(){n("r:"+(Wr++).toString(36))}),void 0,null)),t}return fi(t="r:"+(Wr++).toString(36)),t},unstable_isNewReconciler:!1},Oi={readContext:na,useCallback:xi,useContext:na,useEffect:gi,useImperativeHandle:ki,useLayoutEffect:bi,useMemo:Si,useReducer:ii,useRef:hi,useState:function(){return ii(ai)},useDebugValue:Ei,useDeferredValue:function(e){var t=ii(ai),n=t[0],r=t[1];return gi((function(){var t=qa.transition;qa.transition=1;try{r(e)}finally{qa.transition=t}}),[e]),n},useTransition:function(){var e=ii(ai)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return ii(ai)[0]},unstable_isNewReconciler:!1},Ni={readContext:na,useCallback:xi,useContext:na,useEffect:gi,useImperativeHandle:ki,useLayoutEffect:bi,useMemo:Si,useReducer:li,useRef:hi,useState:function(){return li(ai)},useDebugValue:Ei,useDeferredValue:function(e){var t=li(ai),n=t[0],r=t[1];return gi((function(){var t=qa.transition;qa.transition=1;try{r(e)}finally{qa.transition=t}}),[e]),n},useTransition:function(){var e=li(ai)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return li(ai)[0]},unstable_isNewReconciler:!1},Li=k.ReactCurrentOwner,Ri=!1;function zi(e,t,n,r){t.child=null===e?xa(t,null,n,r):Ea(t,e.child,n,r)}function Ii(e,t,n,r,o){n=n.render;var a=t.ref;return ta(t,o),r=ni(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,zi(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ji(e,t,o))}function ji(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Mu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Au(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Mi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?Ji(e,t,a):(t.flags|=1,(e=Du(i,r)).ref=t.ref,e.return=t,t.child=e)}function Mi(e,t,n,r,o,a){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Ri=!1,0==(a&o))return t.lanes=e.lanes,Ji(e,t,a);0!=(16384&e.flags)&&(Ri=!0)}return Fi(e,t,n,r,a)}function Di(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},pu(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},pu(0,e),null;t.memoizedState={baseLanes:0},pu(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,pu(0,r);return zi(e,t,o,n),t.child}function Ai(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Fi(e,t,n,r,o){var a=po(n)?co:uo.current;return a=fo(t,a),ta(t,o),n=ni(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,zi(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ji(e,t,o))}function Ui(e,t,n,r,o){if(po(n)){var a=!0;yo(t)}else a=!1;if(ta(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,n,r),ya(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?na(s):fo(t,s=po(n)?co:uo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&va(t,i,r,s),ra=!1;var d=t.memoizedState;i.state=d,sa(t,r,i,o),u=t.memoizedState,l!==r||d!==u||so.current||ra?("function"==typeof c&&(da(t,n,c,r),u=t.memoizedState),(l=ra||ha(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,aa(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:qo(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?na(u):fo(t,u=po(n)?co:uo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&va(t,i,r,u),ra=!1,d=t.memoizedState,i.state=d,sa(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||so.current||ra?("function"==typeof p&&(da(t,n,p,r),h=t.memoizedState),(s=ra||ha(t,n,s,r,d,h,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Bi(e,t,n,r,a,o)}function Bi(e,t,n,r,o,a){Ai(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&go(t,n,!1),Ji(e,t,a);r=t.stateNode,Li.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ea(t,e.child,null,a),t.child=Ea(t,null,l,a)):zi(e,t,l,a),t.memoizedState=r.state,o&&go(t,n,!0),t.child}function $i(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Oa(e,t.containerInfo)}var Vi,Hi,Wi,Qi={dehydrated:null,retryLane:0};function qi(e,t,n){var r,o=t.pendingProps,a=za.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),io(za,1&a),null===e?(void 0!==o.fallback&&Ua(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,t.lanes=33554432,e):((n=Uu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Du(i,l),null!==e?r=Du(e,r):(r=Fu(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Qi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Du(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Uu(t,o,0,null),n=Fu(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Yi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ea(e.return,t)}function Gi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Xi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(zi(e,t,r.children,n),0!=(2&(r=za.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Yi(e,n);else if(19===e.tag)Yi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(io(za,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ia(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Gi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ia(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Gi(t,!0,n,null,a,t.lastEffect);break;case"together":Gi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ji(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Il|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Du(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Du(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function Zi(e,t){if(!Da)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function el(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&ho(),null;case 3:return Na(),ao(so),ao(uo),Wa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||($a(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ra(t);var a=Pa(Ta.current);if(n=t.type,null!==e&&null!=t.stateNode)Hi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Pa(Ca.current),$a(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[qr]=t,r[Kr]=l,n){case"dialog":Cr("cancel",r),Cr("close",r);break;case"iframe":case"object":case"embed":Cr("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)Cr(kr[e],r);break;case"source":Cr("error",r);break;case"img":case"image":case"link":Cr("error",r),Cr("load",r);break;case"details":Cr("toggle",r);break;case"input":ee(r,l),Cr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Cr("invalid",r);break;case"textarea":ue(r,l),Cr("invalid",r)}for(var s in xe(n,l),e=null,l)l.hasOwnProperty(s)&&(a=l[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&Cr("scroll",r));switch(n){case"input":G(r),re(r,l,!0);break;case"textarea":G(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=jr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[qr]=t,e[Kr]=r,Vi(e,t),t.stateNode=e,s=Se(n,r),n){case"dialog":Cr("cancel",e),Cr("close",e),a=r;break;case"iframe":case"object":case"embed":Cr("load",e),a=r;break;case"video":case"audio":for(a=0;a<kr.length;a++)Cr(kr[a],e);a=r;break;case"source":Cr("error",e),a=r;break;case"img":case"image":case"link":Cr("error",e),Cr("load",e),a=r;break;case"details":Cr("toggle",e),a=r;break;case"input":ee(e,r),a=Z(e,r),Cr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Cr("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),Cr("invalid",e);break;default:a=r}xe(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?ke(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ye(e,f):"number"==typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Cr("scroll",e):null!=f&&w(e,l,f,s))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=jr)}Ar(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Wi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Pa(Ta.current),Pa(Ca.current),$a(t)?(r=t.stateNode,n=t.memoizedProps,r[qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[qr]=t,t.stateNode=r)}return null;case 13:return ao(za),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&$a(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&za.current)?0===Ll&&(Ll=3):(0!==Ll&&3!==Ll||(Ll=4),null===_l||0==(134217727&Il)&&0==(134217727&jl)||fu(_l,Pl))),(r||n)&&(t.flags|=4),null);case 4:return Na(),null===e&&Tr(t.stateNode.containerInfo),null;case 10:return Zo(t),null;case 17:return po(t.type)&&ho(),null;case 19:if(ao(za),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)Zi(r,!1);else{if(0!==Ll||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Ia(e))){for(t.flags|=64,Zi(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return io(za,1&za.current|2),t.child}e=e.sibling}null!==r.tail&&Fo()>Fl&&(t.flags|=64,l=!0,Zi(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ia(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Zi(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Da)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-r.renderingStartTime>Fl&&1073741824!==n&&(t.flags|=64,l=!0,Zi(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fo(),n.sibling=null,t=za.current,io(za,l?1&t|2:1&t),n):null;case 23:case 24:return hu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function tl(e){switch(e.tag){case 1:po(e.type)&&ho();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Na(),ao(so),ao(uo),Wa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ra(e),null;case 13:return ao(za),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(za),null;case 4:return Na(),null;case 10:return Zo(e),null;case 23:case 24:return hu(),null;default:return null}}function nl(e,t){try{var n="",r=t;do{n+=Q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function rl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Vi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Hi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Pa(Ca.current);var i,l=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=jr)}for(f in xe(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Cr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===j?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Wi=function(e,t,n,r){n!==r&&(t.flags|=4)};var ol="function"==typeof WeakMap?WeakMap:Map;function al(e,t,n){(n=ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vl||(Vl=!0,Hl=r),rl(0,t)},n}function il(e,t,n){(n=ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return rl(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Wl?Wl=new Set([this]):Wl.add(this),rl(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ll="function"==typeof WeakSet?WeakSet:Set;function ul(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Lu(e,t)}else t.current=null}function sl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&$r(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function cl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Pu(n,e),Tu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ca(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ca(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ar(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function fl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function dl(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(bo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Pu(t,n);else{r=t;try{o()}catch(e){Lu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ul(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Lu(t,e)}break;case 5:ul(t);break;case 4:gl(e,t)}}function pl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function hl(e){return 5===e.tag||3===e.tag||4===e.tag}function ml(e){e:{for(var t=e.return;null!==t;){if(hl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||hl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vl(e,n,t):yl(e,n,t)}function vl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=jr));else if(4!==r&&null!==(e=e.child))for(vl(e,t,n),e=e.sibling;null!==e;)vl(e,t,n),e=e.sibling}function yl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function gl(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(dl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(dl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function bl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,o),t=Se(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?ke(n,u):"dangerouslySetInnerHTML"===l?ve(n,u):"children"===l?ye(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Al=Fo(),fl(t.child,!0)),void wl(t);case 19:return void wl(t);case 17:return;case 23:case 24:return void fl(t,null!==t.memoizedState)}throw Error(i(163))}function wl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ll),t.forEach((function(t){var r=zu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function kl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var El=Math.ceil,xl=k.ReactCurrentDispatcher,Sl=k.ReactCurrentOwner,Cl=0,_l=null,Tl=null,Pl=0,Ol=0,Nl=oo(0),Ll=0,Rl=null,zl=0,Il=0,jl=0,Ml=0,Dl=null,Al=0,Fl=1/0;function Ul(){Fl=Fo()+500}var Bl,$l=null,Vl=!1,Hl=null,Wl=null,Ql=!1,ql=null,Kl=90,Yl=[],Gl=[],Xl=null,Jl=0,Zl=null,eu=-1,tu=0,nu=0,ru=null,ou=!1;function au(){return 0!=(48&Cl)?Fo():-1!==eu?eu:eu=Fo()}function iu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Uo()?1:2;if(0===tu&&(tu=zl),0!==Qo.transition){0!==nu&&(nu=null!==Dl?Dl.pendingLanes:0),e=tu;var t=4186112&~nu;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Uo(),e=At(0!=(4&Cl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tu)}function lu(e,t,n){if(50<Jl)throw Jl=0,Zl=null,Error(i(185));if(null===(e=uu(e,t)))return null;Bt(e,t,n),e===_l&&(jl|=t,4===Ll&&fu(e,Pl));var r=Uo();1===t?0!=(8&Cl)&&0==(48&Cl)?du(e):(su(e,n),0===Cl&&(Ul(),Ho())):(0==(4&Cl)||98!==r&&99!==r||(null===Xl?Xl=new Set([e]):Xl.add(e)),su(e,n)),Dl=e}function uu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function su(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-$t(l),s=1<<u,c=a[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,jt(s);var f=It;a[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=Mt(e,e===_l?Pl:0),t=It,0===r)null!==n&&(n!==zo&&xo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==zo&&xo(n)}15===t?(n=du.bind(null,e),null===jo?(jo=[n],Mo=Eo(Po,Wo)):jo.push(n),n=zo):n=14===t?Vo(99,du.bind(null,e)):Vo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),cu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function cu(e){if(eu=-1,nu=tu=0,0!=(48&Cl))throw Error(i(327));var t=e.callbackNode;if(_u()&&e.callbackNode!==t)return null;var n=Mt(e,e===_l?Pl:0);if(0===n)return null;var r=n,o=Cl;Cl|=16;var a=yu();for(_l===e&&Pl===r||(Ul(),mu(e,r));;)try{wu();break}catch(t){vu(e,t)}if(Jo(),xl.current=a,Cl=o,null!==Tl?r=0:(_l=null,Pl=0,r=Ll),0!=(zl&jl))mu(e,0);else if(0!==r){if(2===r&&(Cl|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(n=Dt(e))&&(r=gu(e,n))),1===r)throw t=Rl,mu(e,0),fu(e,n),su(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:xu(e);break;case 3:if(fu(e,n),(62914560&n)===n&&10<(r=Al+500-Fo())){if(0!==Mt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){au(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ur(xu.bind(null,e),r);break}xu(e);break;case 4:if(fu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-$t(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=Fo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*El(n/1960))-n)){e.timeoutHandle=Ur(xu.bind(null,e),n);break}xu(e);break;case 5:xu(e);break;default:throw Error(i(329))}}return su(e,Fo()),e.callbackNode===t?cu.bind(null,e):null}function fu(e,t){for(t&=~Ml,t&=~jl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-$t(t),r=1<<n;e[n]=-1,t&=~r}}function du(e){if(0!=(48&Cl))throw Error(i(327));if(_u(),e===_l&&0!=(e.expiredLanes&Pl)){var t=Pl,n=gu(e,t);0!=(zl&jl)&&(n=gu(e,t=Mt(e,t)))}else n=gu(e,t=Mt(e,0));if(0!==e.tag&&2===n&&(Cl|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(t=Dt(e))&&(n=gu(e,t))),1===n)throw n=Rl,mu(e,0),fu(e,t),su(e,Fo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,xu(e),su(e,Fo()),null}function pu(e,t){io(Nl,Ol),Ol|=t,zl|=t}function hu(){Ol=Nl.current,ao(Nl)}function mu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Br(n)),null!==Tl)for(n=Tl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ho();break;case 3:Na(),ao(so),ao(uo),Wa();break;case 5:Ra(r);break;case 4:Na();break;case 13:case 19:ao(za);break;case 10:Zo(r);break;case 23:case 24:hu()}n=n.return}_l=e,Tl=Du(e.current,null),Pl=Ol=zl=t,Ll=0,Rl=null,Ml=jl=Il=0}function vu(e,t){for(;;){var n=Tl;try{if(Jo(),Qa.current=Ti,Ja){for(var r=Ya.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ja=!1}if(Ka=0,Xa=Ga=Ya=null,Za=!1,Sl.current=null,null===n||null===n.return){Ll=1,Rl=t,Tl=null;break}e:{var a=e,i=n.return,l=n,u=t;if(t=Pl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&za.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var y=new Set;y.add(s),d.updateQueue=y}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var g=ia(-1,1);g.tag=2,la(l,g)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ol,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=Ru.bind(null,a,s,l);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ll&&(Ll=2),u=nl(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,ua(d,al(0,a,t));break e;case 1:a=u;var k=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof k.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Wl||!Wl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,ua(d,il(d,a,t));break e}}d=d.return}while(null!==d)}Eu(n)}catch(e){t=e,Tl===n&&null!==n&&(Tl=n=n.return);continue}break}}function yu(){var e=xl.current;return xl.current=Ti,null===e?Ti:e}function gu(e,t){var n=Cl;Cl|=16;var r=yu();for(_l===e&&Pl===t||mu(e,t);;)try{bu();break}catch(t){vu(e,t)}if(Jo(),Cl=n,xl.current=r,null!==Tl)throw Error(i(261));return _l=null,Pl=0,Ll}function bu(){for(;null!==Tl;)ku(Tl)}function wu(){for(;null!==Tl&&!So();)ku(Tl)}function ku(e){var t=Bl(e.alternate,e,Ol);e.memoizedProps=e.pendingProps,null===t?Eu(e):Tl=t,Sl.current=null}function Eu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=el(n,t,Ol)))return void(Tl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ol)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=tl(t)))return n.flags&=2047,void(Tl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Tl=t);Tl=t=e}while(null!==t);0===Ll&&(Ll=5)}function xu(e){var t=Uo();return $o(99,Su.bind(null,e,t)),null}function Su(e,t){do{_u()}while(null!==ql);if(0!=(48&Cl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var s=31-$t(a),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,a&=~c}if(null!==Xl&&0==(24&r)&&Xl.has(e)&&Xl.delete(e),e===_l&&(Tl=_l=null,Pl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Cl,Cl|=32,Sl.current=null,Mr=qt,dr(l=fr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=l,y=null;t:for(;;){for(var g;v!==u||0!==a&&3!==v.nodeType||(d=f+a),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(g=v.firstChild);)y=v,v=g;for(;;){if(v===l)break t;if(y===u&&++h===a&&(d=f),y===s&&++m===c&&(p=f),null!==(g=v.nextSibling))break;y=(v=y).parentNode}v=g}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Dr={focusedElem:l,selectionRange:u},qt=!1,ru=null,ou=!1,$l=r;do{try{Cu()}catch(e){if(null===$l)throw Error(i(330));Lu($l,e),$l=$l.nextEffect}}while(null!==$l);ru=null,$l=r;do{try{for(l=e;null!==$l;){var b=$l.flags;if(16&b&&ye($l.stateNode,""),128&b){var w=$l.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:ml($l),$l.flags&=-3;break;case 6:ml($l),$l.flags&=-3,bl($l.alternate,$l);break;case 1024:$l.flags&=-1025;break;case 1028:$l.flags&=-1025,bl($l.alternate,$l);break;case 4:bl($l.alternate,$l);break;case 8:gl(l,u=$l);var E=u.alternate;pl(u),null!==E&&pl(E)}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Lu($l,e),$l=$l.nextEffect}}while(null!==$l);if(k=Dr,w=fr(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&cr(b.ownerDocument.documentElement,b)){null!==l&&dr(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!k.extend&&E>l&&(u=l,l=E,E=u),u=sr(b,E),a=sr(b,l),u&&a&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),E>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}qt=!!Mr,Dr=Mr=null,e.current=n,$l=r;do{try{for(b=e;null!==$l;){var x=$l.flags;if(36&x&&cl(b,$l.alternate,$l),128&x){w=void 0;var S=$l.ref;if(null!==S){var C=$l.stateNode;switch($l.tag){case 5:w=C;break;default:w=C}"function"==typeof S?S(w):S.current=w}}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Lu($l,e),$l=$l.nextEffect}}while(null!==$l);$l=null,Io(),Cl=o}else e.current=n;if(Ql)Ql=!1,ql=e,Kl=t;else for($l=r;null!==$l;)t=$l.nextEffect,$l.nextEffect=null,8&$l.flags&&((x=$l).sibling=null,x.stateNode=null),$l=t;if(0===(r=e.pendingLanes)&&(Wl=null),1===r?e===Zl?Jl++:(Jl=0,Zl=e):Jl=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(bo,n,void 0,64==(64&n.current.flags))}catch(e){}if(su(e,Fo()),Vl)throw Vl=!1,e=Hl,Hl=null,e;return 0!=(8&Cl)||Ho(),null}function Cu(){for(;null!==$l;){var e=$l.alternate;ou||null===ru||(0!=(8&$l.flags)?Je($l,ru)&&(ou=!0):13===$l.tag&&kl(e,$l)&&Je($l,ru)&&(ou=!0));var t=$l.flags;0!=(256&t)&&sl(e,$l),0==(512&t)||Ql||(Ql=!0,Vo(97,(function(){return _u(),null}))),$l=$l.nextEffect}}function _u(){if(90!==Kl){var e=97<Kl?97:Kl;return Kl=90,$o(e,Ou)}return!1}function Tu(e,t){Yl.push(t,e),Ql||(Ql=!0,Vo(97,(function(){return _u(),null})))}function Pu(e,t){Gl.push(t,e),Ql||(Ql=!0,Vo(97,(function(){return _u(),null})))}function Ou(){if(null===ql)return!1;var e=ql;if(ql=null,0!=(48&Cl))throw Error(i(331));var t=Cl;Cl|=32;var n=Gl;Gl=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Lu(a,e)}}for(n=Yl,Yl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Lu(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Cl=t,Ho(),!0}function Nu(e,t,n){la(e,t=al(0,t=nl(n,t),1)),t=au(),null!==(e=uu(e,1))&&(Bt(e,1,t),su(e,t))}function Lu(e,t){if(3===e.tag)Nu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Nu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wl||!Wl.has(r))){var o=il(n,e=nl(t,e),1);if(la(n,o),o=au(),null!==(n=uu(n,1)))Bt(n,1,o),su(n,o);else if("function"==typeof r.componentDidCatch&&(null===Wl||!Wl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ru(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=au(),e.pingedLanes|=e.suspendedLanes&n,_l===e&&(Pl&n)===n&&(4===Ll||3===Ll&&(62914560&Pl)===Pl&&500>Fo()-Al?mu(e,0):Ml|=n),su(e,t)}function zu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Uo()?1:2:(0===tu&&(tu=zl),0===(t=Ft(62914560&~tu))&&(t=4194304))),n=au(),null!==(e=uu(e,t))&&(Bt(e,t,n),su(e,n))}function Iu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function ju(e,t,n,r){return new Iu(e,t,n,r)}function Mu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Du(e,t){var n=e.alternate;return null===n?((n=ju(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Au(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Mu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Fu(n.children,o,a,t);case M:l=8,o|=16;break;case C:l=8,o|=1;break;case _:return(e=ju(12,n,t,8|o)).elementType=_,e.type=_,e.lanes=a,e;case N:return(e=ju(13,n,t,o)).type=N,e.elementType=N,e.lanes=a,e;case L:return(e=ju(19,n,t,o)).elementType=L,e.lanes=a,e;case D:return Uu(n,o,a,t);case A:return(e=ju(24,n,t,o)).elementType=A,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:l=10;break e;case P:l=9;break e;case O:l=11;break e;case R:l=14;break e;case z:l=16,r=null;break e;case I:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=ju(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Fu(e,t,n,r){return(e=ju(7,e,r,t)).lanes=n,e}function Uu(e,t,n,r){return(e=ju(23,e,r,t)).elementType=D,e.lanes=n,e}function Bu(e,t,n){return(e=ju(6,e,null,t)).lanes=n,e}function $u(e,t,n){return(t=ju(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function Hu(e,t,n,r){var o=t.current,a=au(),l=iu(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(po(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(po(s)){n=vo(n,s,u);break e}}n=u}else n=lo;return null===t.context?t.context=n:t.pendingContext=n,(t=ia(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),la(o,t),lu(o,l,a),l}function Wu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qu(e,t){Qu(e,t),(e=e.alternate)&&Qu(e,t)}function Ku(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Vu(e,t,null!=n&&!0===n.hydrate),t=ju(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oa(t),e[Yr]=n.current,Tr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Yu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Gu(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Wu(i);l.call(e)}}Hu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ku(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Wu(i);u.call(e)}}!function(e,t){var n=Cl;Cl&=-2,Cl|=8;try{e(t)}finally{0===(Cl=n)&&(Ul(),Ho())}}((function(){Hu(t,i,e,o)}))}return Wu(i)}Bl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||so.current)Ri=!0;else{if(0==(n&r)){switch(Ri=!1,t.tag){case 3:$i(t),Va();break;case 5:La(t);break;case 1:po(t.type)&&yo(t);break;case 4:Oa(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;io(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?qi(e,t,n):(io(za,1&za.current),null!==(t=Ji(e,t,n))?t.sibling:null);io(za,1&za.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Xi(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),io(za,za.current),r)break;return null;case 23:case 24:return t.lanes=0,Di(e,t,n)}return Ji(e,t,n)}Ri=0!=(16384&e.flags)}else Ri=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,uo.current),ta(t,n),o=ni(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var a=!0;yo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&da(t,r,l,e),o.updater=pa,t.stateNode=o,o._reactInternals=t,ya(t,r,e,n),t=Bi(null,t,r,!0,a,n)}else t.tag=0,zi(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Mu(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===R)return 14}return 2}(o),e=qo(o,e),a){case 0:t=Fi(null,t,o,e,n);break e;case 1:t=Ui(null,t,o,e,n);break e;case 11:t=Ii(null,t,o,e,n);break e;case 14:t=ji(null,t,o,qo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Fi(e,t,r,o=t.elementType===r?o:qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:qo(r,o),n);case 3:if($i(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,aa(e,t),sa(t,r,null,n),(r=t.memoizedState.element)===o)Va(),t=Ji(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Ma=Vr(t.stateNode.containerInfo.firstChild),ja=t,a=Da=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ha.push(a);for(n=xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else zi(e,t,r,n),Va();t=t.child}return t;case 5:return La(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Fr(r,o)?l=null:null!==a&&Fr(r,a)&&(t.flags|=16),Ai(e,t),zi(e,t,l,n),t.child;case 6:return null===e&&Ua(t),null;case 13:return qi(e,t,n);case 4:return Oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ea(t,null,r,n):zi(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ii(e,t,r,o=t.elementType===r?o:qo(r,o),n);case 7:return zi(e,t,t.pendingProps,n),t.child;case 8:case 12:return zi(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(io(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=ar(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!so.current){t=Ji(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=ia(-1,n&-n)).tag=2,la(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ea(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}zi(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ta(t,n),r=r(o=na(o,a.unstable_observedBits)),t.flags|=1,zi(e,t,r,n),t.child;case 14:return a=qo(o=t.type,t.pendingProps),ji(e,t,o,a=qo(o.type,a),r,n);case 15:return Mi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,yo(t)):e=!1,ta(t,n),ma(t,r,o),ya(t,r,o,n),Bi(null,t,r,!0,e,n);case 19:return Xi(e,t,n);case 23:case 24:return Di(e,t,n)}throw Error(i(156,t.tag))},Ku.prototype.render=function(e){Hu(e,this._internalRoot,null,null)},Ku.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Hu(null,e,null,(function(){t[Yr]=null}))},Ze=function(e){13===e.tag&&(lu(e,4,au()),qu(e,4))},et=function(e){13===e.tag&&(lu(e,67108864,au()),qu(e,67108864))},tt=function(e){if(13===e.tag){var t=au(),n=iu(e);lu(e,n,t),qu(e,n)}},nt=function(e,t){return t()},_e=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(i(90));X(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Re=function(e,t){var n=Cl;Cl|=1;try{return e(t)}finally{0===(Cl=n)&&(Ul(),Ho())}},ze=function(e,t,n,r,o){var a=Cl;Cl|=4;try{return $o(98,e.bind(null,t,n,r,o))}finally{0===(Cl=a)&&(Ul(),Ho())}},Ie=function(){0==(49&Cl)&&(function(){if(null!==Xl){var e=Xl;Xl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,su(e,Fo())}))}Ho()}(),_u())},je=function(e,t){var n=Cl;Cl|=2;try{return e(t)}finally{0===(Cl=n)&&(Ul(),Ho())}};var Xu={findFiberByHostInstance:Xr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},Ju={bundleType:Xu.bundleType,version:Xu.version,rendererPackageName:Xu.rendererPackageName,rendererConfig:Xu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Xe(o),e;if(a===r)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:Xu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Zu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Zu.isDisabled&&Zu.supportsFiber)try{bo=Zu.inject(Ju),wo=Zu}catch(me){}}t.render=function(e,t,n){if(!Yu(t))throw Error(i(200));return Gu(null,e,t,!1,n)}},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function E(e){return k(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return E(e)||k(e)===c},t.isConcurrentMode=E,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===v},t.isMemo=function(e){return k(e)===m},t.isPortal=function(e){return k(e)===o},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=k},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var b=g.prototype=new y;b.constructor=g,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!E.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+_(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),T(i,t,n,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+_(l=e[s],s);u+=T(l,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=T(l=l.value,t,n,c=r+_(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function P(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function O(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function L(){var e=N.current;if(null===e)throw Error(p(321));return e}var R={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!E.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return L().useCallback(e,t)},t.useContext=function(e,t){return L().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return L().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return L().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return L().useLayoutEffect(e,t)},t.useMemo=function(e,t){return L().useMemo(e,t)},t.useReducer=function(e,t,n){return L().useReducer(e,t,n)},t.useRef=function(e){return L().useRef(e)},t.useState=function(e){return L().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,a=Object.create(o.prototype),i=new P(r||[]);return a._invoke=function(e,t,n){var r=f;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw a;return N()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=C(i,n);if(l){if(l===m)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=c(e,t,n);if("normal"===u.type){if(r=n.done?h:d,u.arg===m)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=h,n.method="throw",n.arg=u.arg)}}}(e,n,i),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",m={};function v(){}function y(){}function g(){}var b={};u(b,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(O([])));k&&k!==n&&r.call(k,a)&&(b=k);var E=g.prototype=v.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var u=c(e[o],e,a);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(f).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function C(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,m;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function O(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:N}}function N(){return{value:t,done:!0}}return y.prototype=g,u(E,"constructor",g),u(g,"constructor",y),y.displayName=u(g,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,u(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},x(S.prototype),u(S.prototype,i,(function(){return this})),e.AsyncIterator=S,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(E),u(E,l,"Generator"),u(E,a,(function(){return this})),u(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=O,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return l.type="throw",l.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:O(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,y=-1,g=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+g;try{v(!0,e)?k.postMessage(null):(m=!1,v=null)}catch(e){throw k.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,k.postMessage(null))},r=function(e,n){y=d((function(){e(t.unstable_now())}),n)},o=function(){p(y),y=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>C(i,n))void 0!==u&&0>C(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var _=[],T=[],P=1,O=null,N=3,L=!1,R=!1,z=!1;function I(e){for(var t=x(T);null!==t;){if(null===t.callback)S(T);else{if(!(t.startTime<=e))break;S(T),t.sortIndex=t.expirationTime,E(_,t)}t=x(T)}}function j(e){if(z=!1,I(e),!R)if(null!==x(_))R=!0,n(M);else{var t=x(T);null!==t&&r(j,t.startTime-e)}}function M(e,n){R=!1,z&&(z=!1,o()),L=!0;var a=N;try{for(I(n),O=x(_);null!==O&&(!(O.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=O.callback;if("function"==typeof i){O.callback=null,N=O.priorityLevel;var l=i(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?O.callback=l:O===x(_)&&S(_),I(n)}else S(_);O=x(_)}if(null!==O)var u=!0;else{var s=x(T);null!==s&&r(j,s.startTime-n),u=!1}return u}finally{O=null,N=a,L=!1}}var D=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||L||(R=!0,n(M))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return x(_)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:P++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,E(T,e),null===x(_)&&e===x(T)&&(z?o():z=!0,r(j,i-l))):(e.sortIndex=u,E(_,e),R||L||(R=!0,n(M))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},593:e=>{"use strict";e.exports=JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}')}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(294),t=n(935);function r(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var s=n(757),c=n.n(s);function f(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=f(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function d(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=f(e))&&(r&&(r+=" "),r+=t);return r}function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function h(e){return"number"==typeof e&&!isNaN(e)}function m(e){return"boolean"==typeof e}function v(e){return"string"==typeof e}function y(e){return"function"==typeof e}function g(e){return v(e)||y(e)?e:null}function b(e){return 0===e||e}var w=!("undefined"==typeof window||!window.document||!window.document.createElement);function k(t){return(0,e.isValidElement)(t)||v(t)||y(t)||h(t)}var E={TOP_LEFT:"top-left",TOP_RIGHT:"top-right",TOP_CENTER:"top-center",BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",BOTTOM_CENTER:"bottom-center"},x={INFO:"info",SUCCESS:"success",WARNING:"warning",ERROR:"error",DEFAULT:"default",DARK:"dark"};function S(t){var n=t.enter,r=t.exit,o=t.appendPosition,a=void 0!==o&&o,i=t.collapse,l=void 0===i||i,u=t.collapseDuration,s=void 0===u?300:u;return function(t){var o=t.children,i=t.position,u=t.preventExitTransition,c=t.done,f=t.nodeRef,d=t.isIn,p=a?n+"--"+i:n,h=a?r+"--"+i:r,m=(0,e.useRef)(),v=(0,e.useRef)(0);function y(){var e=f.current;e.removeEventListener("animationend",y),0===v.current&&(e.className=m.current)}function g(){var e=f.current;e.removeEventListener("animationend",g),l?function(e,t,n){void 0===n&&(n=300);var r=e.scrollHeight,o=e.style;requestAnimationFrame((function(){o.minHeight="initial",o.height=r+"px",o.transition="all "+n+"ms",requestAnimationFrame((function(){o.height="0",o.padding="0",o.margin="0",setTimeout(t,n)}))}))}(e,c,s):c()}return(0,e.useLayoutEffect)((function(){var e;e=f.current,m.current=e.className,e.className+=" "+p,e.addEventListener("animationend",y)}),[]),(0,e.useEffect)((function(){d||(u?g():function(){v.current=1;var e=f.current;e.className+=" "+h,e.addEventListener("animationend",g)}())}),[d]),e.createElement(e.Fragment,null,o)}}var C={list:new Map,emitQueue:new Map,on:function(e,t){return this.list.has(e)||this.list.set(e,[]),this.list.get(e).push(t),this},off:function(e,t){if(t){var n=this.list.get(e).filter((function(e){return e!==t}));return this.list.set(e,n),this}return this.list.delete(e),this},cancelEmit:function(e){var t=this.emitQueue.get(e);return t&&(t.forEach(clearTimeout),this.emitQueue.delete(e)),this},emit:function(e){for(var t=this,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];this.list.has(e)&&this.list.get(e).forEach((function(n){var o=setTimeout((function(){n.apply(void 0,r)}),0);t.emitQueue.has(e)||t.emitQueue.set(e,[]),t.emitQueue.get(e).push(o)}))}};function _(t,n){void 0===n&&(n=!1);var r=(0,e.useRef)(t);return(0,e.useEffect)((function(){n&&(r.current=t)})),r.current}function T(e,t){switch(t.type){case 0:return[].concat(e,[t.toastId]).filter((function(e){return e!==t.staleId}));case 1:return b(t.toastId)?e.filter((function(e){return e!==t.toastId})):[]}}function P(e){return e.targetTouches&&e.targetTouches.length>=1?e.targetTouches[0].clientX:e.clientX}function O(e){return e.targetTouches&&e.targetTouches.length>=1?e.targetTouches[0].clientY:e.clientY}function N(t){var n=t.closeToast,r=t.type,o=t.ariaLabel,a=void 0===o?"close":o;return(0,e.createElement)("button",{className:"Toastify__close-button Toastify__close-button--"+r,type:"button",onClick:function(e){e.stopPropagation(),n(e)},"aria-label":a},(0,e.createElement)("svg",{"aria-hidden":"true",viewBox:"0 0 14 16"},(0,e.createElement)("path",{fillRule:"evenodd",d:"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z"})))}function L(t){var n,r,o=t.delay,a=t.isRunning,i=t.closeToast,l=t.type,u=t.hide,s=t.className,c=t.style,f=t.controlledProgress,h=t.progress,m=t.rtl,v=t.isIn,g=p({},c,{animationDuration:o+"ms",animationPlayState:a?"running":"paused",opacity:u?0:1});f&&(g.transform="scaleX("+h+")");var b=d("Toastify__progress-bar",f?"Toastify__progress-bar--controlled":"Toastify__progress-bar--animated","Toastify__progress-bar--"+l,((n={})["Toastify__progress-bar--rtl"]=m,n)),w=y(s)?s({rtl:m,type:l,defaultClassName:b}):d(b,s),k=((r={})[f&&h>=1?"onTransitionEnd":"onAnimationEnd"]=f&&h<1?null:function(){v&&i()},r);return(0,e.createElement)("div",Object.assign({role:"progressbar","aria-hidden":u?"true":"false","aria-label":"notification timer",className:w,style:g},k))}L.defaultProps={type:x.DEFAULT,hide:!1};var R=function(t){var n,r=function(t){var n=(0,e.useState)(!0),r=n[0],o=n[1],a=(0,e.useState)(!1),i=a[0],l=a[1],u=(0,e.useRef)(null),s=_({start:0,x:0,y:0,delta:0,removalDistance:0,canCloseOnClick:!0,canDrag:!1,boundingRect:null}),c=_(t,!0),f=t.autoClose,d=t.pauseOnHover,p=t.closeToast,h=t.onClick,m=t.closeOnClick;function v(e){if(t.draggable){var n=u.current;s.canCloseOnClick=!0,s.canDrag=!0,s.boundingRect=n.getBoundingClientRect(),n.style.transition="",s.x=P(e.nativeEvent),s.y=O(e.nativeEvent),"x"===t.draggableDirection?(s.start=s.x,s.removalDistance=n.offsetWidth*(t.draggablePercent/100)):(s.start=s.y,s.removalDistance=n.offsetHeight*(t.draggablePercent/100))}}function g(){if(s.boundingRect){var e=s.boundingRect,n=e.top,r=e.bottom,o=e.left,a=e.right;t.pauseOnHover&&s.x>=o&&s.x<=a&&s.y>=n&&s.y<=r?w():b()}}function b(){o(!0)}function w(){o(!1)}function k(e){if(s.canDrag){e.preventDefault();var n=u.current;r&&w(),s.x=P(e),s.y=O(e),"x"===t.draggableDirection?s.delta=s.x-s.start:s.delta=s.y-s.start,s.start!==s.x&&(s.canCloseOnClick=!1),n.style.transform="translate"+t.draggableDirection+"("+s.delta+"px)",n.style.opacity=""+(1-Math.abs(s.delta/s.removalDistance))}}function E(){var e=u.current;if(s.canDrag){if(s.canDrag=!1,Math.abs(s.delta)>s.removalDistance)return l(!0),void t.closeToast();e.style.transition="transform 0.2s, opacity 0.2s",e.style.transform="translate"+t.draggableDirection+"(0)",e.style.opacity="1"}}(0,e.useEffect)((function(){return y(t.onOpen)&&t.onOpen((0,e.isValidElement)(t.children)&&t.children.props),function(){y(c.onClose)&&c.onClose((0,e.isValidElement)(c.children)&&c.children.props)}}),[]),(0,e.useEffect)((function(){return t.draggable&&(document.addEventListener("mousemove",k),document.addEventListener("mouseup",E),document.addEventListener("touchmove",k),document.addEventListener("touchend",E)),function(){t.draggable&&(document.removeEventListener("mousemove",k),document.removeEventListener("mouseup",E),document.removeEventListener("touchmove",k),document.removeEventListener("touchend",E))}}),[t.draggable]),(0,e.useEffect)((function(){return t.pauseOnFocusLoss&&(document.hasFocus()||w(),window.addEventListener("focus",b),window.addEventListener("blur",w)),function(){t.pauseOnFocusLoss&&(window.removeEventListener("focus",b),window.removeEventListener("blur",w))}}),[t.pauseOnFocusLoss]);var x={onMouseDown:v,onTouchStart:v,onMouseUp:g,onTouchEnd:g};return f&&d&&(x.onMouseEnter=w,x.onMouseLeave=b),m&&(x.onClick=function(e){h&&h(e),s.canCloseOnClick&&p()}),{playToast:b,pauseToast:w,isRunning:r,preventExitTransition:i,toastRef:u,eventHandlers:x}}(t),o=r.isRunning,a=r.preventExitTransition,i=r.toastRef,l=r.eventHandlers,u=t.closeButton,s=t.children,c=t.autoClose,f=t.onClick,p=t.type,h=t.hideProgressBar,m=t.closeToast,v=t.transition,g=t.position,b=t.className,w=t.style,k=t.bodyClassName,E=t.bodyStyle,x=t.progressClassName,S=t.progressStyle,C=t.updateId,T=t.role,N=t.progress,R=t.rtl,z=t.toastId,I=t.deleteToast,j=t.isIn,M=d("Toastify__toast","Toastify__toast--"+p,((n={})["Toastify__toast--rtl"]=R,n)),D=y(b)?b({rtl:R,position:g,type:p,defaultClassName:M}):d(M,b),A=!!N;return(0,e.createElement)(v,{isIn:j,done:I,position:g,preventExitTransition:a,nodeRef:i},(0,e.createElement)("div",Object.assign({id:z,onClick:f,className:D},l,{style:w,ref:i}),(0,e.createElement)("div",Object.assign({},j&&{role:T},{className:y(k)?k({type:p}):d("Toastify__toast-body",k),style:E}),s),function(t){if(t){var n={closeToast:m,type:p};return y(t)?t(n):(0,e.isValidElement)(t)?(0,e.cloneElement)(t,n):void 0}}(u),(c||A)&&(0,e.createElement)(L,Object.assign({},C&&!A?{key:"pb-"+C}:{},{rtl:R,delay:c,isRunning:o,isIn:j,closeToast:m,hide:h,type:p,style:S,className:x,controlledProgress:A,progress:N}))))},z=function(t){var n=function(t){var n=(0,e.useReducer)((function(e){return e+1}),0)[1],r=(0,e.useReducer)(T,[]),o=r[0],a=r[1],i=(0,e.useRef)(null),l=_(0),u=_([]),s=_({}),c=_({toastKey:1,displayedToast:0,props:t,containerId:null,isToastActive:f,getToast:function(e){return s[e]||null}});function f(e){return-1!==o.indexOf(e)}function d(e){var t=e.containerId;!c.props.limit||t&&c.containerId!==t||(l-=u.length,u=[])}function p(e){a({type:1,toastId:e})}function w(){var e=u.shift();x(e.toastContent,e.toastProps,e.staleId)}function E(t,r){var o=r.delay,a=r.staleId,f=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(r,["delay","staleId"]);if(k(t)&&!function(e){var t=e.containerId,n=e.toastId,r=e.updateId;return!!(!i.current||c.props.enableMultiContainer&&t!==c.props.containerId||s[n]&&null==r)}(f)){var d=f.toastId,E=f.updateId,S=c.props,C=function(){return p(d)},_=null==f.updateId;_&&l++;var T,P,O={toastId:d,updateId:E,isIn:!1,key:f.key||c.toastKey++,type:f.type,closeToast:C,closeButton:f.closeButton,rtl:S.rtl,position:f.position||S.position,transition:f.transition||S.transition,className:g(f.className||S.toastClassName),bodyClassName:g(f.bodyClassName||S.bodyClassName),style:f.style||S.toastStyle,bodyStyle:f.bodyStyle||S.bodyStyle,onClick:f.onClick||S.onClick,pauseOnHover:m(f.pauseOnHover)?f.pauseOnHover:S.pauseOnHover,pauseOnFocusLoss:m(f.pauseOnFocusLoss)?f.pauseOnFocusLoss:S.pauseOnFocusLoss,draggable:m(f.draggable)?f.draggable:S.draggable,draggablePercent:h(f.draggablePercent)?f.draggablePercent:S.draggablePercent,draggableDirection:f.draggableDirection||S.draggableDirection,closeOnClick:m(f.closeOnClick)?f.closeOnClick:S.closeOnClick,progressClassName:g(f.progressClassName||S.progressClassName),progressStyle:f.progressStyle||S.progressStyle,autoClose:(T=f.autoClose,P=S.autoClose,!1===T||h(T)&&T>0?T:P),hideProgressBar:m(f.hideProgressBar)?f.hideProgressBar:S.hideProgressBar,progress:f.progress,role:v(f.role)?f.role:S.role,deleteToast:function(){!function(e){delete s[e];var t=u.length;if((l=b(e)?l-1:l-c.displayedToast)<0&&(l=0),t>0){var r=b(e)?1:c.props.limit;if(1===t||1===r)c.displayedToast++,w();else{var o=r>t?t:r;c.displayedToast=o;for(var a=0;a<o;a++)w()}}else n()}(d)}};y(f.onOpen)&&(O.onOpen=f.onOpen),y(f.onClose)&&(O.onClose=f.onClose),"y"===O.draggableDirection&&80===O.draggablePercent&&(O.draggablePercent*=1.5);var N=S.closeButton;!1===f.closeButton||k(f.closeButton)?N=f.closeButton:!0===f.closeButton&&(N=!k(S.closeButton)||S.closeButton),O.closeButton=N;var L=t;(0,e.isValidElement)(t)&&!v(t.type)?L=(0,e.cloneElement)(t,{closeToast:C,toastProps:O}):y(t)&&(L=t({closeToast:C,toastProps:O})),S.limit&&S.limit>0&&l>S.limit&&_?u.push({toastContent:L,toastProps:O,staleId:a}):h(o)&&o>0?setTimeout((function(){x(L,O,a)}),o):x(L,O,a)}}function x(e,t,n){var r=t.toastId;n&&delete s[n],s[r]={content:e,props:t},a({type:0,toastId:r,staleId:n})}return(0,e.useEffect)((function(){return c.containerId=t.containerId,C.cancelEmit(3).on(0,E).on(1,(function(e){return i.current&&p(e)})).on(5,d).emit(2,c),function(){return C.emit(3,c)}}),[]),(0,e.useEffect)((function(){c.isToastActive=f,c.displayedToast=o.length,C.emit(4,o.length,t.containerId)}),[o]),(0,e.useEffect)((function(){c.props=t})),{getToastToRender:function(e){for(var n={},r=t.newestOnTop?Object.keys(s).reverse():Object.keys(s),o=0;o<r.length;o++){var a=s[r[o]],i=a.props.position;n[i]||(n[i]=[]),n[i].push(a)}return Object.keys(n).map((function(t){return e(t,n[t])}))},collection:s,containerRef:i,isToastActive:f}}(t),r=n.getToastToRender,o=n.containerRef,a=n.isToastActive,i=t.className,l=t.style,u=t.rtl,s=t.containerId;function c(e){var t,n=d("Toastify__toast-container","Toastify__toast-container--"+e,((t={})["Toastify__toast-container--rtl"]=u,t));return y(i)?i({position:e,rtl:u,defaultClassName:n}):d(n,g(i))}return(0,e.createElement)("div",{ref:o,className:"Toastify",id:s},r((function(t,n){var r=0===n.length?p({},l,{pointerEvents:"none"}):p({},l);return(0,e.createElement)("div",{className:c(t),style:r,key:"container-"+t},n.map((function(t){var n=t.content,r=t.props;return(0,e.createElement)(R,Object.assign({},r,{isIn:a(r.toastId),key:"toast-"+r.key,closeButton:!0===r.closeButton?N:r.closeButton}),n)})))})))};z.defaultProps={position:E.TOP_RIGHT,transition:S({enter:"Toastify--animate Toastify__bounce-enter",exit:"Toastify--animate Toastify__bounce-exit",appendPosition:!0}),rtl:!1,autoClose:5e3,hideProgressBar:!1,closeButton:N,pauseOnHover:!0,pauseOnFocusLoss:!0,closeOnClick:!0,newestOnTop:!1,draggable:!0,draggablePercent:80,draggableDirection:"x",role:"alert"};var I,j,M,D=new Map,A=[],F=!1;function U(){return Math.random().toString(36).substr(2,9)}function B(e){return e&&(v(e.toastId)||h(e.toastId))?e.toastId:U()}function $(n,r){return D.size>0?C.emit(0,n,r):(A.push({content:n,options:r}),F&&w&&(F=!1,j=document.createElement("div"),document.body.appendChild(j),(0,t.render)((0,e.createElement)(z,Object.assign({},M)),j))),r.toastId}function V(e,t){return p({},t,{type:t&&t.type||e,toastId:B(t)})}var H=function(e){return function(t,n){return $(t,V(e,n))}},W=function(e,t){return $(e,V(x.DEFAULT,t))};W.success=H(x.SUCCESS),W.info=H(x.INFO),W.error=H(x.ERROR),W.warning=H(x.WARNING),W.dark=H(x.DARK),W.warn=W.warning,W.dismiss=function(e){return C.emit(1,e)},W.clearWaitingQueue=function(e){return void 0===e&&(e={}),C.emit(5,e)},W.isActive=function(e){var t=!1;return D.forEach((function(n){n.isToastActive&&n.isToastActive(e)&&(t=!0)})),t},W.update=function(e,t){void 0===t&&(t={}),setTimeout((function(){var n=function(e,t){var n=t.containerId,r=D.get(n||I);return r?r.getToast(e):null}(e,t);if(n){var r=n.props,o=n.content,a=p({},r,t,{toastId:t.toastId||e,updateId:U()});a.toastId!==e&&(a.staleId=e);var i=a.render||o;delete a.render,$(i,a)}}),0)},W.done=function(e){W.update(e,{progress:1})},W.onChange=function(e){return y(e)&&C.on(4,e),function(){y(e)&&C.off(4,e)}},W.configure=function(e){void 0===e&&(e={}),F=!0,M=e},W.POSITION=E,W.TYPE=x,C.on(2,(function(e){I=e.containerId||e,D.set(I,e),A.forEach((function(e){C.emit(0,e.content,e.options)})),A=[]})).on(3,(function(e){D.delete(e.containerId||e),0===D.size&&C.off(0).off(1).off(5),w&&j&&document.body.removeChild(j)}));var Q=n(669),q=n.n(Q);var K=window.location.protocol+"//"+window.location.host+"/api/v1/lefts/";const Y=function(t){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(m,t);var n,i,s,f,d,p,h=(d=m,p=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=u(d);if(p){var n=u(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return l(this,e)});function m(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,m),(n=h.call(this,e,t)).state={isLoading:!0,menu:""},n}return n=m,(i=[{key:"componentDidMount",value:(s=c().mark((function e(){var t;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this._isMounted=!0,e.next=3,q().get(K+"index");case 3:(t=e.sent).data.status?this.setState({menu:t.data.menu,isLoading:!1}):W.error(t.data.message);case 5:case"end":return e.stop()}}),e,this)})),f=function(){var e=this,t=arguments;return new Promise((function(n,o){var a=s.apply(e,t);function i(e){r(a,n,o,i,l,"next",e)}function l(e){r(a,n,o,i,l,"throw",e)}i(void 0)}))},function(){return f.apply(this,arguments)})},{key:"render",value:function(){var t=this.state.menu;return e.createElement("ul",{className:"metismenu list-unstyled",id:"side-menu"},(null==t?void 0:t.length)>0&&t.map((function(t,n){var r,o,a;return e.createElement("li",{key:n},e.createElement("a",{href:0===(null==t||null===(r=t.children)||void 0===r?void 0:r.length)?t.url:"#",className:(null==t||null===(o=t.children)||void 0===o?void 0:o.length)>0?"has-arrow waves-effect":"waves-effect","aria-expanded":!1},e.createElement("i",{className:"nav-icon "+t.icon}),t.name),e.createElement("ul",{className:"sub-menu mm-collapse"},(null==t||null===(a=t.children)||void 0===a?void 0:a.length)>0&&t.children.map((function(t,n){return e.createElement("li",{key:n},e.createElement("a",{href:t.url},e.createElement("i",{className:"nav-icon "+t.icon}),t.name))}))))})))}}])&&o(n.prototype,i),m}(e.Component);function G(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,a(e,t)}var X=n(697),J=n.n(X);function Z(){return(Z=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ee(e){return"/"===e.charAt(0)}function te(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}const ne=function(e,t){if(!e)throw new Error("Invariant failed")};function re(e){return"/"===e.charAt(0)?e:"/"+e}function oe(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function ae(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function ie(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function le(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=Z({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&ee(e),i=t&&ee(t),l=a||i;if(e&&ee(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var u=o[o.length-1];n="."===u||".."===u||""===u}else n=!1;for(var s=0,c=o.length;c>=0;c--){var f=o[c];"."===f?te(o,c):".."===f?(te(o,c),s++):s&&(te(o,c),s--)}if(!l)for(;s--;s)o.unshift("..");!l||""===o[0]||o[0]&&ee(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function ue(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var se=!("undefined"==typeof window||!window.document||!window.document.createElement);function ce(e,t){t(window.confirm(e))}var fe="popstate",de="hashchange";function pe(){try{return window.history.state||{}}catch(e){return{}}}function he(e){void 0===e&&(e={}),se||ne(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,i=a.forceRefresh,l=void 0!==i&&i,u=a.getUserConfirmation,s=void 0===u?ce:u,c=a.keyLength,f=void 0===c?6:c,d=e.basename?ae(re(e.basename)):"";function p(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return d&&(a=oe(a,d)),le(a,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var m=ue();function v(e){Z(P,e),P.length=n.length,m.notifyListeners(P.location,P.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||w(p(e.state))}function g(){w(p(pe()))}var b=!1;function w(e){b?(b=!1,v()):m.confirmTransitionTo(e,"POP",s,(function(t){t?v({action:"POP",location:e}):function(e){var t=P.location,n=E.indexOf(t.key);-1===n&&(n=0);var r=E.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,S(o))}(e)}))}var k=p(pe()),E=[k.key];function x(e){return d+ie(e)}function S(e){n.go(e)}var C=0;function _(e){1===(C+=e)&&1===e?(window.addEventListener(fe,y),o&&window.addEventListener(de,g)):0===C&&(window.removeEventListener(fe,y),o&&window.removeEventListener(de,g))}var T=!1,P={length:n.length,action:"POP",location:k,createHref:x,push:function(e,t){var o="PUSH",a=le(e,t,h(),P.location);m.confirmTransitionTo(a,o,s,(function(e){if(e){var t=x(a),i=a.key,u=a.state;if(r)if(n.pushState({key:i,state:u},null,t),l)window.location.href=t;else{var s=E.indexOf(P.location.key),c=E.slice(0,s+1);c.push(a.key),E=c,v({action:o,location:a})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",a=le(e,t,h(),P.location);m.confirmTransitionTo(a,o,s,(function(e){if(e){var t=x(a),i=a.key,u=a.state;if(r)if(n.replaceState({key:i,state:u},null,t),l)window.location.replace(t);else{var s=E.indexOf(P.location.key);-1!==s&&(E[s]=a.key),v({action:o,location:a})}else window.location.replace(t)}}))},go:S,goBack:function(){S(-1)},goForward:function(){S(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return T||(_(1),T=!0),function(){return T&&(T=!1,_(-1)),t()}},listen:function(e){var t=m.appendListener(e);return _(1),function(){_(-1),t()}}};return P}var me=1073741823,ve="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function ye(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const ge=e.createContext||function(t,n){var r,o,a,i="__create-react-context-"+((ve[a="__global_unique_id__"]=(ve[a]||0)+1)+"__"),l=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=ye(t.props.value),t}G(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[i]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?t=0:(t="function"==typeof n?n(r,o):me,0!=(t|=0)&&this.emitter.set(e.value,t))}var a,i},r.render=function(){return this.props.children},t}(e.Component);l.childContextTypes=((r={})[i]=J().object.isRequired,r);var u=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}G(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?me:t},r.componentDidMount=function(){this.context[i]&&this.context[i].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?me:e},r.componentWillUnmount=function(){this.context[i]&&this.context[i].off(this.onUpdate)},r.getValue=function(){return this.context[i]?this.context[i].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return u.contextTypes=((o={})[i]=J().object,o),{Provider:l,Consumer:u}};var be=n(779),we=n.n(be);function ke(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n(864),n(679);var Ee=function(e){var t=ge();return t.displayName="Router-History",t}(),xe=function(e){var t=ge();return t.displayName="Router",t}(),Se=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}G(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return e.createElement(xe.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(Ee.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component,e.Component;var Ce={},_e=0;function Te(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,l=void 0!==i&&i,u=n.sensitive,s=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Ce[n]||(Ce[n]={});if(r[e])return r[e];var o=[],a={regexp:we()(e,o,t),keys:o};return _e<1e4&&(r[e]=a,_e++),a}(n,{end:a,strict:l,sensitive:s}),o=r.regexp,i=r.keys,u=o.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),d=e===c;return a&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var Pe=function(t){function n(){return t.apply(this,arguments)||this}return G(n,t),n.prototype.render=function(){var t=this;return e.createElement(xe.Consumer,null,(function(n){n||ne(!1);var r=t.props.location||n.location,o=Z({},n,{location:r,match:t.props.computedMatch?t.props.computedMatch:t.props.path?Te(r.pathname,t.props):n.match}),a=t.props,i=a.children,l=a.component,u=a.render;return Array.isArray(i)&&0===i.length&&(i=null),e.createElement(xe.Provider,{value:o},o.match?i?"function"==typeof i?i(o):i:l?e.createElement(l,o):u?u(o):null:"function"==typeof i?i(o):null)}))},n}(e.Component);e.Component;var Oe=function(t){function n(){return t.apply(this,arguments)||this}return G(n,t),n.prototype.render=function(){var t=this;return e.createElement(xe.Consumer,null,(function(n){n||ne(!1);var r,o,a=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==o&&e.isValidElement(t)){r=t;var i=t.props.path||t.props.from;o=i?Te(a.pathname,Z({},t.props,{path:i})):n.match}})),o?e.cloneElement(r,{location:a,computedMatch:o}):null}))},n}(e.Component);e.useContext;var Ne=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))||this).history=he(e.props),e}return G(n,t),n.prototype.render=function(){return e.createElement(Se,{history:this.history,children:this.props.children})},n}(e.Component);e.Component;var Le=function(e,t){return"function"==typeof e?e(t):e},Re=function(e,t){return"string"==typeof e?le(e,null,null,t):e},ze=function(e){return e},Ie=e.forwardRef;void 0===Ie&&(Ie=ze);var je=Ie((function(t,n){var r=t.innerRef,o=t.navigate,a=t.onClick,i=ke(t,["innerRef","navigate","onClick"]),l=i.target,u=Z({},i,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return u.ref=ze!==Ie&&n||r,e.createElement("a",u)})),Me=Ie((function(t,n){var r=t.component,o=void 0===r?je:r,a=t.replace,i=t.to,l=t.innerRef,u=ke(t,["component","replace","to","innerRef"]);return e.createElement(xe.Consumer,null,(function(t){t||ne(!1);var r=t.history,s=Re(Le(i,t.location),t.location),c=s?r.createHref(s):"",f=Z({},u,{href:c,navigate:function(){var e=Le(i,t.location);(a?r.replace:r.push)(e)}});return ze!==Ie?f.ref=n||l:f.innerRef=l,e.createElement(o,f)}))})),De=function(e){return e},Ae=e.forwardRef;void 0===Ae&&(Ae=De),Ae((function(t,n){var r=t["aria-current"],o=void 0===r?"page":r,a=t.activeClassName,i=void 0===a?"active":a,l=t.activeStyle,u=t.className,s=t.exact,c=t.isActive,f=t.location,d=t.sensitive,p=t.strict,h=t.style,m=t.to,v=t.innerRef,y=ke(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(xe.Consumer,null,(function(t){t||ne(!1);var r=f||t.location,a=Re(Le(m,r),r),g=a.pathname,b=g&&g.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=b?Te(r.pathname,{path:b,exact:s,sensitive:d,strict:p}):null,k=!!(c?c(w,r):w),E=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,i):u,x=k?Z({},h,{},l):h,S=Z({"aria-current":k&&o||null,className:E,style:x,to:a},y);return De!==Ae?S.ref=n||v:S.innerRef=v,e.createElement(Me,S)}))})),window.location.pathname.substring(0,3);var Fe=e.createElement(Ne,null,e.createElement(Oe,null,e.createElement(Pe,{exact:!0,compact:!0,component:Y})));(0,t.render)(Fe,window.document.getElementById("sidebar-menu"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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OEMsR0FBWXdLLEdBQWUsS0FDM0MzVSxVQUFXQSxFQUNYNWtDLE1BQU9BLEVBQ1B4USxHQUFJMGtELEdBQ0g2RSxHQVNILE9BTklLLEtBQXFCQyxHQUN2QnptRCxFQUFNNHRCLElBQU1tNEIsR0FBZ0JDLEVBRTVCaG1ELEVBQU1nbUQsU0FBV0EsRUFHWixnQkFBb0JNLEdBQU10bUQsU0NsU3BCNUosT0FBT0MsU0FBU0gsU0FBU29YLFVBQVUsRUFBRSxHRGtQdEQsSUNqUE1nNkMsR0FDRixnQkFBQyxHQUFELEtBQ0ksZ0JBQUM3QixHQUFELEtBQ0ksZ0JBQUNKLEdBQUQsQ0FBTzdqRCxPQUFLLEVBQUMrbEQsU0FBTyxFQUFDN3NELFVBQVd3Z0IsT0FLNUNyZ0IsRUFBQUEsRUFBQUEsUUFBT3lzRCxHQUFLbHhELE9BQU96QixTQUFTNnlELGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b2FzdGlmeS9kaXN0L3JlYWN0LXRvYXN0aWZ5LmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL3NyYy9hcHAvbW9kdWxlcy9MZWZ0TWVudS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy1iYXNpY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLWJhc2ljcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovL3JlYWN0anMtYmFzaWNzLy4vc3JjL2FwcC9tZW51LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCAgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBjb25maWcudHJhbnNpdGlvbmFsICYmIGNvbmZpZy50cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/ICdFVElNRURPVVQnIDogJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4sICcxLjAuMCcpLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiwgJzEuMC4wJyksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4sICcxLjAuMCcpXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5JywgJ3BhcmFtcyddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd0aW1lb3V0TWVzc2FnZScsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdkZWNvbXByZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICdtYXhCb2R5TGVuZ3RoJywgJ21heFJlZGlyZWN0cycsICd0cmFuc3BvcnQnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJywgJ3Jlc3BvbnNlRW5jb2RpbmcnXG4gIF07XG4gIHZhciBkaXJlY3RNZXJnZUtleXMgPSBbJ3ZhbGlkYXRlU3RhdHVzJ107XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGlyZWN0TWVyZ2VLZXlzLCBmdW5jdGlvbiBtZXJnZShwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpXG4gICAgLmNvbmNhdChkaXJlY3RNZXJnZUtleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcxKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB7XG4gICAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gICAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2VcbiAgfSxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICB2YXIgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIHZhciBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHN0cmljdEpTT05QYXJzaW5nIHx8IChmb3JjZWRKU09OUGFyc2luZyAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiBkYXRhLmxlbmd0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBlbmhhbmNlRXJyb3IoZSwgdGhpcywgJ0VfSlNPTl9QQVJTRScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuICh0eXBlb2YgcGF5bG9hZCA9PT0gJ29iamVjdCcpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBwa2cgPSByZXF1aXJlKCcuLy4uLy4uL3BhY2thZ2UuanNvbicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xudmFyIGN1cnJlbnRWZXJBcnIgPSBwa2cudmVyc2lvbi5zcGxpdCgnLicpO1xuXG4vKipcbiAqIENvbXBhcmUgcGFja2FnZSB2ZXJzaW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gdGhhblZlcnNpb25cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc09sZGVyVmVyc2lvbih2ZXJzaW9uLCB0aGFuVmVyc2lvbikge1xuICB2YXIgcGtnVmVyc2lvbkFyciA9IHRoYW5WZXJzaW9uID8gdGhhblZlcnNpb24uc3BsaXQoJy4nKSA6IGN1cnJlbnRWZXJBcnI7XG4gIHZhciBkZXN0VmVyID0gdmVyc2lvbi5zcGxpdCgnLicpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIGlmIChwa2dWZXJzaW9uQXJyW2ldID4gZGVzdFZlcltpXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChwa2dWZXJzaW9uQXJyW2ldIDwgZGVzdFZlcltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvclxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgdmFyIGlzRGVwcmVjYXRlZCA9IHZlcnNpb24gJiYgaXNPbGRlclZlcnNpb24odmVyc2lvbik7XG5cbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIHBrZy52ZXJzaW9uICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkIGluICcgKyB2ZXJzaW9uKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVwcmVjYXRlZCAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPbGRlclZlcnNpb246IGlzT2xkZXJWZXJzaW9uLFxuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbik7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIjtcbmltcG9ydCBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufSIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IGlzVmFsaWRFbGVtZW50LCB1c2VSZWYsIHVzZUxheW91dEVmZmVjdCwgdXNlRWZmZWN0LCB1c2VSZWR1Y2VyLCBjbG9uZUVsZW1lbnQsIHVzZVN0YXRlLCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGlzTnVtKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odik7XG59XG5mdW5jdGlvbiBpc0Jvb2wodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdib29sZWFuJztcbn1cbmZ1bmN0aW9uIGlzU3RyKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJztcbn1cbmZ1bmN0aW9uIGlzRm4odikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBwYXJzZUNsYXNzTmFtZSh2KSB7XG4gIHJldHVybiBpc1N0cih2KSB8fCBpc0ZuKHYpID8gdiA6IG51bGw7XG59XG5mdW5jdGlvbiBpc1RvYXN0SWRWYWxpZCh0b2FzdElkKSB7XG4gIHJldHVybiB0b2FzdElkID09PSAwIHx8IHRvYXN0SWQ7XG59XG5mdW5jdGlvbiBnZXRBdXRvQ2xvc2VEZWxheSh0b2FzdEF1dG9DbG9zZSwgY29udGFpbmVyQXV0b0Nsb3NlKSB7XG4gIHJldHVybiB0b2FzdEF1dG9DbG9zZSA9PT0gZmFsc2UgfHwgaXNOdW0odG9hc3RBdXRvQ2xvc2UpICYmIHRvYXN0QXV0b0Nsb3NlID4gMCA/IHRvYXN0QXV0b0Nsb3NlIDogY29udGFpbmVyQXV0b0Nsb3NlO1xufVxudmFyIGNhblVzZURvbSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBjYW5CZVJlbmRlcmVkKGNvbnRlbnQpIHtcbiAgcmV0dXJuIGlzVmFsaWRFbGVtZW50KGNvbnRlbnQpIHx8IGlzU3RyKGNvbnRlbnQpIHx8IGlzRm4oY29udGVudCkgfHwgaXNOdW0oY29udGVudCk7XG59XG5cbnZhciBQT1NJVElPTiA9IHtcbiAgVE9QX0xFRlQ6ICd0b3AtbGVmdCcsXG4gIFRPUF9SSUdIVDogJ3RvcC1yaWdodCcsXG4gIFRPUF9DRU5URVI6ICd0b3AtY2VudGVyJyxcbiAgQk9UVE9NX0xFRlQ6ICdib3R0b20tbGVmdCcsXG4gIEJPVFRPTV9SSUdIVDogJ2JvdHRvbS1yaWdodCcsXG4gIEJPVFRPTV9DRU5URVI6ICdib3R0b20tY2VudGVyJ1xufTtcbnZhciBUWVBFID0ge1xuICBJTkZPOiAnaW5mbycsXG4gIFNVQ0NFU1M6ICdzdWNjZXNzJyxcbiAgV0FSTklORzogJ3dhcm5pbmcnLFxuICBFUlJPUjogJ2Vycm9yJyxcbiAgREVGQVVMVDogJ2RlZmF1bHQnLFxuICBEQVJLOiAnZGFyaydcbn07XG5cbi8qKlxyXG4gKiBVc2VkIHRvIGNvbGxhcHNlIHRvYXN0IGFmdGVyIGV4aXQgYW5pbWF0aW9uXHJcbiAqL1xuZnVuY3Rpb24gY29sbGFwc2VUb2FzdChub2RlLCBkb25lLCBkdXJhdGlvblxuLyogQ09MTEFQU0VfRFVSQVRJT04gKi9cbikge1xuICBpZiAoZHVyYXRpb24gPT09IHZvaWQgMCkge1xuICAgIGR1cmF0aW9uID0gMzAwO1xuICB9XG5cbiAgdmFyIGhlaWdodCA9IG5vZGUuc2Nyb2xsSGVpZ2h0O1xuICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIHN0eWxlLm1pbkhlaWdodCA9ICdpbml0aWFsJztcbiAgICBzdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICAgIHN0eWxlLnRyYW5zaXRpb24gPSBcImFsbCBcIiArIGR1cmF0aW9uICsgXCJtc1wiO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBzdHlsZS5oZWlnaHQgPSAnMCc7XG4gICAgICBzdHlsZS5wYWRkaW5nID0gJzAnO1xuICAgICAgc3R5bGUubWFyZ2luID0gJzAnO1xuICAgICAgc2V0VGltZW91dChkb25lLCBkdXJhdGlvbik7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcclxuICogQ3NzIGFuaW1hdGlvbiB0aGF0IGp1c3Qgd29yay5cclxuICogWW91IGNvdWxkIHVzZSBhbmltYXRlLmNzcyBmb3IgaW5zdGFuY2VcclxuICpcclxuICpcclxuICogYGBgXHJcbiAqIGNzc1RyYW5zaXRpb24oe1xyXG4gKiAgIGVudGVyOiBcImFuaW1hdGVfX2FuaW1hdGVkIGFuaW1hdGVfX2JvdW5jZUluXCIsXHJcbiAqICAgZXhpdDogXCJhbmltYXRlX19hbmltYXRlZCBhbmltYXRlX19ib3VuY2VPdXRcIlxyXG4gKiB9KVxyXG4gKiBgYGBcclxuICpcclxuICovXG5cbmZ1bmN0aW9uIGNzc1RyYW5zaXRpb24oX3JlZikge1xuICB2YXIgZW50ZXIgPSBfcmVmLmVudGVyLFxuICAgICAgZXhpdCA9IF9yZWYuZXhpdCxcbiAgICAgIF9yZWYkYXBwZW5kUG9zaXRpb24gPSBfcmVmLmFwcGVuZFBvc2l0aW9uLFxuICAgICAgYXBwZW5kUG9zaXRpb24gPSBfcmVmJGFwcGVuZFBvc2l0aW9uID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkYXBwZW5kUG9zaXRpb24sXG4gICAgICBfcmVmJGNvbGxhcHNlID0gX3JlZi5jb2xsYXBzZSxcbiAgICAgIGNvbGxhcHNlID0gX3JlZiRjb2xsYXBzZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkY29sbGFwc2UsXG4gICAgICBfcmVmJGNvbGxhcHNlRHVyYXRpb24gPSBfcmVmLmNvbGxhcHNlRHVyYXRpb24sXG4gICAgICBjb2xsYXBzZUR1cmF0aW9uID0gX3JlZiRjb2xsYXBzZUR1cmF0aW9uID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGNvbGxhcHNlRHVyYXRpb247XG4gIHJldHVybiBmdW5jdGlvbiBUb2FzdFRyYW5zaXRpb24oX3JlZjIpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBfcmVmMi5jaGlsZHJlbixcbiAgICAgICAgcG9zaXRpb24gPSBfcmVmMi5wb3NpdGlvbixcbiAgICAgICAgcHJldmVudEV4aXRUcmFuc2l0aW9uID0gX3JlZjIucHJldmVudEV4aXRUcmFuc2l0aW9uLFxuICAgICAgICBkb25lID0gX3JlZjIuZG9uZSxcbiAgICAgICAgbm9kZVJlZiA9IF9yZWYyLm5vZGVSZWYsXG4gICAgICAgIGlzSW4gPSBfcmVmMi5pc0luO1xuICAgIHZhciBlbnRlckNsYXNzTmFtZSA9IGFwcGVuZFBvc2l0aW9uID8gZW50ZXIgKyBcIi0tXCIgKyBwb3NpdGlvbiA6IGVudGVyO1xuICAgIHZhciBleGl0Q2xhc3NOYW1lID0gYXBwZW5kUG9zaXRpb24gPyBleGl0ICsgXCItLVwiICsgcG9zaXRpb24gOiBleGl0O1xuICAgIHZhciBiYXNlQ2xhc3NOYW1lID0gdXNlUmVmKCk7XG4gICAgdmFyIGFuaW1hdGlvblN0ZXAgPSB1c2VSZWYoMFxuICAgIC8qIEVudGVyICovXG4gICAgKTtcbiAgICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgb25FbnRlcigpO1xuICAgIH0sIFtdKTtcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpc0luKSBwcmV2ZW50RXhpdFRyYW5zaXRpb24gPyBvbkV4aXRlZCgpIDogb25FeGl0KCk7XG4gICAgfSwgW2lzSW5dKTtcblxuICAgIGZ1bmN0aW9uIG9uRW50ZXIoKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVSZWYuY3VycmVudDtcbiAgICAgIGJhc2VDbGFzc05hbWUuY3VycmVudCA9IG5vZGUuY2xhc3NOYW1lO1xuICAgICAgbm9kZS5jbGFzc05hbWUgKz0gXCIgXCIgKyBlbnRlckNsYXNzTmFtZTtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgb25FbnRlcmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkVudGVyZWQoKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVSZWYuY3VycmVudDtcbiAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgb25FbnRlcmVkKTtcblxuICAgICAgaWYgKGFuaW1hdGlvblN0ZXAuY3VycmVudCA9PT0gMFxuICAgICAgLyogRW50ZXIgKi9cbiAgICAgICkge1xuICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gYmFzZUNsYXNzTmFtZS5jdXJyZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25FeGl0KCkge1xuICAgICAgYW5pbWF0aW9uU3RlcC5jdXJyZW50ID0gMVxuICAgICAgLyogRXhpdCAqL1xuICAgICAgO1xuICAgICAgdmFyIG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7XG4gICAgICBub2RlLmNsYXNzTmFtZSArPSBcIiBcIiArIGV4aXRDbGFzc05hbWU7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIG9uRXhpdGVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkV4aXRlZCgpIHtcbiAgICAgIHZhciBub2RlID0gbm9kZVJlZi5jdXJyZW50O1xuICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBvbkV4aXRlZCk7XG4gICAgICBjb2xsYXBzZSA/IGNvbGxhcHNlVG9hc3Qobm9kZSwgZG9uZSwgY29sbGFwc2VEdXJhdGlvbikgOiBkb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUmVhY3RfX2RlZmF1bHQuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbiAgfTtcbn1cblxudmFyIGV2ZW50TWFuYWdlciA9IHtcbiAgbGlzdDogLyojX19QVVJFX18qL25ldyBNYXAoKSxcbiAgZW1pdFF1ZXVlOiAvKiNfX1BVUkVfXyovbmV3IE1hcCgpLFxuICBvbjogZnVuY3Rpb24gb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5saXN0LmhhcyhldmVudCkgfHwgdGhpcy5saXN0LnNldChldmVudCwgW10pO1xuICAgIHRoaXMubGlzdC5nZXQoZXZlbnQpLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBvZmY6IGZ1bmN0aW9uIG9mZihldmVudCwgY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHZhciBjYiA9IHRoaXMubGlzdC5nZXQoZXZlbnQpLmZpbHRlcihmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgcmV0dXJuIGNiICE9PSBjYWxsYmFjaztcbiAgICAgIH0pO1xuICAgICAgdGhpcy5saXN0LnNldChldmVudCwgY2IpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5saXN0W1wiZGVsZXRlXCJdKGV2ZW50KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY2FuY2VsRW1pdDogZnVuY3Rpb24gY2FuY2VsRW1pdChldmVudCkge1xuICAgIHZhciB0aW1lcnMgPSB0aGlzLmVtaXRRdWV1ZS5nZXQoZXZlbnQpO1xuXG4gICAgaWYgKHRpbWVycykge1xuICAgICAgdGltZXJzLmZvckVhY2goY2xlYXJUaW1lb3V0KTtcbiAgICAgIHRoaXMuZW1pdFF1ZXVlW1wiZGVsZXRlXCJdKGV2ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcclxuICAgKiBFbnF1ZXVlIHRoZSBldmVudCBhdCB0aGUgZW5kIG9mIHRoZSBjYWxsIHN0YWNrXHJcbiAgICogRG9pbmcgc28gbGV0IHRoZSB1c2VyIGNhbGwgdG9hc3QgYXMgZm9sbG93OlxyXG4gICAqIHRvYXN0KCcxJylcclxuICAgKiB0b2FzdCgnMicpXHJcbiAgICogdG9hc3QoJzMnKVxyXG4gICAqIFdpdGhvdXQgc2V0VGltZW1vdXQgdGhlIGNvZGUgYWJvdmUgd2lsbCBub3Qgd29ya1xyXG4gICAqL1xuICBlbWl0OiBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHRoaXMubGlzdC5oYXMoZXZlbnQpICYmIHRoaXMubGlzdC5nZXQoZXZlbnQpLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjYWxsYmFjay5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgfSwgMCk7XG4gICAgICBfdGhpcy5lbWl0UXVldWUuaGFzKGV2ZW50KSB8fCBfdGhpcy5lbWl0UXVldWUuc2V0KGV2ZW50LCBbXSk7XG5cbiAgICAgIF90aGlzLmVtaXRRdWV1ZS5nZXQoZXZlbnQpLnB1c2godGltZXIpO1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcclxuICogYHVzZUtlZXBlcmAgaXMgYSBoZWxwZXIgYXJvdW5kIGB1c2VSZWZgLlxyXG4gKlxyXG4gKiBZb3UgZG9uJ3QgbmVlZCB0byBhY2Nlc3MgdGhlIGAuY3VycmVudGBwcm9wZXJ0eSB0byBnZXQgdGhlIHZhbHVlXHJcbiAqIElmIHJlZnJlc2ggaXMgc2V0IHRvIHRydWUuIFRoZSByZWYgd2lsbCBiZSB1cGRhdGVkIGV2ZXJ5IHJlbmRlclxyXG4gKi9cblxuZnVuY3Rpb24gdXNlS2VlcGVyKGFyZywgcmVmcmVzaCkge1xuICBpZiAocmVmcmVzaCA9PT0gdm9pZCAwKSB7XG4gICAgcmVmcmVzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHJlZiA9IHVzZVJlZihhcmcpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZWZyZXNoKSByZWYuY3VycmVudCA9IGFyZztcbiAgfSk7XG4gIHJldHVybiByZWYuY3VycmVudDtcbn1cblxuZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIDBcbiAgICAvKiBBREQgKi9cbiAgICA6XG4gICAgICByZXR1cm4gW10uY29uY2F0KHN0YXRlLCBbYWN0aW9uLnRvYXN0SWRdKS5maWx0ZXIoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBpZCAhPT0gYWN0aW9uLnN0YWxlSWQ7XG4gICAgICB9KTtcblxuICAgIGNhc2UgMVxuICAgIC8qIFJFTU9WRSAqL1xuICAgIDpcbiAgICAgIHJldHVybiBpc1RvYXN0SWRWYWxpZChhY3Rpb24udG9hc3RJZCkgPyBzdGF0ZS5maWx0ZXIoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBpZCAhPT0gYWN0aW9uLnRvYXN0SWQ7XG4gICAgICB9KSA6IFtdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVRvYXN0Q29udGFpbmVyKHByb3BzKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geCArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VVcGRhdGUgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgX3VzZVJlZHVjZXIyID0gdXNlUmVkdWNlcihyZWR1Y2VyLCBbXSksXG4gICAgICB0b2FzdCA9IF91c2VSZWR1Y2VyMlswXSxcbiAgICAgIGRpc3BhdGNoID0gX3VzZVJlZHVjZXIyWzFdO1xuXG4gIHZhciBjb250YWluZXJSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciB0b2FzdENvdW50ID0gdXNlS2VlcGVyKDApO1xuICB2YXIgcXVldWUgPSB1c2VLZWVwZXIoW10pO1xuICB2YXIgY29sbGVjdGlvbiA9IHVzZUtlZXBlcih7fSk7XG4gIHZhciBpbnN0YW5jZSA9IHVzZUtlZXBlcih7XG4gICAgdG9hc3RLZXk6IDEsXG4gICAgZGlzcGxheWVkVG9hc3Q6IDAsXG4gICAgcHJvcHM6IHByb3BzLFxuICAgIGNvbnRhaW5lcklkOiBudWxsLFxuICAgIGlzVG9hc3RBY3RpdmU6IGlzVG9hc3RBY3RpdmUsXG4gICAgZ2V0VG9hc3Q6IGZ1bmN0aW9uIGdldFRvYXN0KGlkKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbltpZF0gfHwgbnVsbDtcbiAgICB9XG4gIH0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGluc3RhbmNlLmNvbnRhaW5lcklkID0gcHJvcHMuY29udGFpbmVySWQ7XG4gICAgZXZlbnRNYW5hZ2VyLmNhbmNlbEVtaXQoM1xuICAgIC8qIFdpbGxVbm1vdW50ICovXG4gICAgKS5vbigwXG4gICAgLyogU2hvdyAqL1xuICAgICwgYnVpbGRUb2FzdCkub24oMVxuICAgIC8qIENsZWFyICovXG4gICAgLCBmdW5jdGlvbiAodG9hc3RJZCkge1xuICAgICAgcmV0dXJuIGNvbnRhaW5lclJlZi5jdXJyZW50ICYmIHJlbW92ZVRvYXN0KHRvYXN0SWQpO1xuICAgIH0pLm9uKDVcbiAgICAvKiBDbGVhcldhaXRpbmdRdWV1ZSAqL1xuICAgICwgY2xlYXJXYWl0aW5nUXVldWUpLmVtaXQoMlxuICAgIC8qIERpZE1vdW50ICovXG4gICAgLCBpbnN0YW5jZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBldmVudE1hbmFnZXIuZW1pdCgzXG4gICAgICAvKiBXaWxsVW5tb3VudCAqL1xuICAgICAgLCBpbnN0YW5jZSk7XG4gICAgfTtcbiAgfSwgW10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGluc3RhbmNlLmlzVG9hc3RBY3RpdmUgPSBpc1RvYXN0QWN0aXZlO1xuICAgIGluc3RhbmNlLmRpc3BsYXllZFRvYXN0ID0gdG9hc3QubGVuZ3RoO1xuICAgIGV2ZW50TWFuYWdlci5lbWl0KDRcbiAgICAvKiBDaGFuZ2UgKi9cbiAgICAsIHRvYXN0Lmxlbmd0aCwgcHJvcHMuY29udGFpbmVySWQpO1xuICB9LCBbdG9hc3RdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpbnN0YW5jZS5wcm9wcyA9IHByb3BzO1xuICB9KTtcblxuICBmdW5jdGlvbiBpc1RvYXN0QWN0aXZlKGlkKSB7XG4gICAgcmV0dXJuIHRvYXN0LmluZGV4T2YoaWQpICE9PSAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyV2FpdGluZ1F1ZXVlKF9yZWYpIHtcbiAgICB2YXIgY29udGFpbmVySWQgPSBfcmVmLmNvbnRhaW5lcklkO1xuICAgIHZhciBsaW1pdCA9IGluc3RhbmNlLnByb3BzLmxpbWl0O1xuXG4gICAgaWYgKGxpbWl0ICYmICghY29udGFpbmVySWQgfHwgaW5zdGFuY2UuY29udGFpbmVySWQgPT09IGNvbnRhaW5lcklkKSkge1xuICAgICAgdG9hc3RDb3VudCAtPSBxdWV1ZS5sZW5ndGg7XG4gICAgICBxdWV1ZSA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVRvYXN0KHRvYXN0SWQpIHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAxXG4gICAgICAvKiBSRU1PVkUgKi9cbiAgICAgICxcbiAgICAgIHRvYXN0SWQ6IHRvYXN0SWRcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlcXVldWVUb2FzdCgpIHtcbiAgICB2YXIgX3F1ZXVlJHNoaWZ0ID0gcXVldWUuc2hpZnQoKSxcbiAgICAgICAgdG9hc3RDb250ZW50ID0gX3F1ZXVlJHNoaWZ0LnRvYXN0Q29udGVudCxcbiAgICAgICAgdG9hc3RQcm9wcyA9IF9xdWV1ZSRzaGlmdC50b2FzdFByb3BzLFxuICAgICAgICBzdGFsZUlkID0gX3F1ZXVlJHNoaWZ0LnN0YWxlSWQ7XG5cbiAgICBhcHBlbmRUb2FzdCh0b2FzdENvbnRlbnQsIHRvYXN0UHJvcHMsIHN0YWxlSWQpO1xuICB9XG4gIC8qKlxyXG4gICAqIGNoZWNrIGlmIGEgY29udGFpbmVyIGlzIGF0dGFjaGVkIHRvIHRoZSBkb21cclxuICAgKiBjaGVjayBmb3IgbXVsdGktY29udGFpbmVyLCBidWlsZCBvbmx5IGlmIGFzc29jaWF0ZWRcclxuICAgKiBjaGVjayBmb3IgZHVwbGljYXRlIHRvYXN0SWQgaWYgbm8gdXBkYXRlXHJcbiAgICovXG5cblxuICBmdW5jdGlvbiBpc05vdFZhbGlkKF9yZWYyKSB7XG4gICAgdmFyIGNvbnRhaW5lcklkID0gX3JlZjIuY29udGFpbmVySWQsXG4gICAgICAgIHRvYXN0SWQgPSBfcmVmMi50b2FzdElkLFxuICAgICAgICB1cGRhdGVJZCA9IF9yZWYyLnVwZGF0ZUlkO1xuICAgIHJldHVybiAhY29udGFpbmVyUmVmLmN1cnJlbnQgfHwgaW5zdGFuY2UucHJvcHMuZW5hYmxlTXVsdGlDb250YWluZXIgJiYgY29udGFpbmVySWQgIT09IGluc3RhbmNlLnByb3BzLmNvbnRhaW5lcklkIHx8IGNvbGxlY3Rpb25bdG9hc3RJZF0gJiYgdXBkYXRlSWQgPT0gbnVsbCA/IHRydWUgOiBmYWxzZTtcbiAgfSAvLyB0aGlzIGZ1bmN0aW9uIGFuZCBhbGwgdGhlIGZ1bmN0aW9uIGNhbGxlZCBpbnNpZGUgbmVlZHMgdG8gcmVseSBvbiByZWYoYHVzZUtlZXBlcmApXG5cblxuICBmdW5jdGlvbiBidWlsZFRvYXN0KGNvbnRlbnQsIF9yZWYzKSB7XG4gICAgdmFyIGRlbGF5ID0gX3JlZjMuZGVsYXksXG4gICAgICAgIHN0YWxlSWQgPSBfcmVmMy5zdGFsZUlkLFxuICAgICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcImRlbGF5XCIsIFwic3RhbGVJZFwiXSk7XG5cbiAgICBpZiAoIWNhbkJlUmVuZGVyZWQoY29udGVudCkgfHwgaXNOb3RWYWxpZChvcHRpb25zKSkgcmV0dXJuO1xuICAgIHZhciB0b2FzdElkID0gb3B0aW9ucy50b2FzdElkLFxuICAgICAgICB1cGRhdGVJZCA9IG9wdGlvbnMudXBkYXRlSWQ7XG4gICAgdmFyIHByb3BzID0gaW5zdGFuY2UucHJvcHM7XG5cbiAgICB2YXIgY2xvc2VUb2FzdCA9IGZ1bmN0aW9uIGNsb3NlVG9hc3QoKSB7XG4gICAgICByZXR1cm4gcmVtb3ZlVG9hc3QodG9hc3RJZCk7XG4gICAgfTtcblxuICAgIHZhciBpc05vdEFuVXBkYXRlID0gb3B0aW9ucy51cGRhdGVJZCA9PSBudWxsO1xuICAgIGlmIChpc05vdEFuVXBkYXRlKSB0b2FzdENvdW50Kys7XG4gICAgdmFyIHRvYXN0UHJvcHMgPSB7XG4gICAgICB0b2FzdElkOiB0b2FzdElkLFxuICAgICAgdXBkYXRlSWQ6IHVwZGF0ZUlkLFxuICAgICAgaXNJbjogZmFsc2UsXG4gICAgICBrZXk6IG9wdGlvbnMua2V5IHx8IGluc3RhbmNlLnRvYXN0S2V5KyssXG4gICAgICB0eXBlOiBvcHRpb25zLnR5cGUsXG4gICAgICBjbG9zZVRvYXN0OiBjbG9zZVRvYXN0LFxuICAgICAgY2xvc2VCdXR0b246IG9wdGlvbnMuY2xvc2VCdXR0b24sXG4gICAgICBydGw6IHByb3BzLnJ0bCxcbiAgICAgIHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uIHx8IHByb3BzLnBvc2l0aW9uLFxuICAgICAgdHJhbnNpdGlvbjogb3B0aW9ucy50cmFuc2l0aW9uIHx8IHByb3BzLnRyYW5zaXRpb24sXG4gICAgICBjbGFzc05hbWU6IHBhcnNlQ2xhc3NOYW1lKG9wdGlvbnMuY2xhc3NOYW1lIHx8IHByb3BzLnRvYXN0Q2xhc3NOYW1lKSxcbiAgICAgIGJvZHlDbGFzc05hbWU6IHBhcnNlQ2xhc3NOYW1lKG9wdGlvbnMuYm9keUNsYXNzTmFtZSB8fCBwcm9wcy5ib2R5Q2xhc3NOYW1lKSxcbiAgICAgIHN0eWxlOiBvcHRpb25zLnN0eWxlIHx8IHByb3BzLnRvYXN0U3R5bGUsXG4gICAgICBib2R5U3R5bGU6IG9wdGlvbnMuYm9keVN0eWxlIHx8IHByb3BzLmJvZHlTdHlsZSxcbiAgICAgIG9uQ2xpY2s6IG9wdGlvbnMub25DbGljayB8fCBwcm9wcy5vbkNsaWNrLFxuICAgICAgcGF1c2VPbkhvdmVyOiBpc0Jvb2wob3B0aW9ucy5wYXVzZU9uSG92ZXIpID8gb3B0aW9ucy5wYXVzZU9uSG92ZXIgOiBwcm9wcy5wYXVzZU9uSG92ZXIsXG4gICAgICBwYXVzZU9uRm9jdXNMb3NzOiBpc0Jvb2wob3B0aW9ucy5wYXVzZU9uRm9jdXNMb3NzKSA/IG9wdGlvbnMucGF1c2VPbkZvY3VzTG9zcyA6IHByb3BzLnBhdXNlT25Gb2N1c0xvc3MsXG4gICAgICBkcmFnZ2FibGU6IGlzQm9vbChvcHRpb25zLmRyYWdnYWJsZSkgPyBvcHRpb25zLmRyYWdnYWJsZSA6IHByb3BzLmRyYWdnYWJsZSxcbiAgICAgIGRyYWdnYWJsZVBlcmNlbnQ6IGlzTnVtKG9wdGlvbnMuZHJhZ2dhYmxlUGVyY2VudCkgPyBvcHRpb25zLmRyYWdnYWJsZVBlcmNlbnQgOiBwcm9wcy5kcmFnZ2FibGVQZXJjZW50LFxuICAgICAgZHJhZ2dhYmxlRGlyZWN0aW9uOiBvcHRpb25zLmRyYWdnYWJsZURpcmVjdGlvbiB8fCBwcm9wcy5kcmFnZ2FibGVEaXJlY3Rpb24sXG4gICAgICBjbG9zZU9uQ2xpY2s6IGlzQm9vbChvcHRpb25zLmNsb3NlT25DbGljaykgPyBvcHRpb25zLmNsb3NlT25DbGljayA6IHByb3BzLmNsb3NlT25DbGljayxcbiAgICAgIHByb2dyZXNzQ2xhc3NOYW1lOiBwYXJzZUNsYXNzTmFtZShvcHRpb25zLnByb2dyZXNzQ2xhc3NOYW1lIHx8IHByb3BzLnByb2dyZXNzQ2xhc3NOYW1lKSxcbiAgICAgIHByb2dyZXNzU3R5bGU6IG9wdGlvbnMucHJvZ3Jlc3NTdHlsZSB8fCBwcm9wcy5wcm9ncmVzc1N0eWxlLFxuICAgICAgYXV0b0Nsb3NlOiBnZXRBdXRvQ2xvc2VEZWxheShvcHRpb25zLmF1dG9DbG9zZSwgcHJvcHMuYXV0b0Nsb3NlKSxcbiAgICAgIGhpZGVQcm9ncmVzc0JhcjogaXNCb29sKG9wdGlvbnMuaGlkZVByb2dyZXNzQmFyKSA/IG9wdGlvbnMuaGlkZVByb2dyZXNzQmFyIDogcHJvcHMuaGlkZVByb2dyZXNzQmFyLFxuICAgICAgcHJvZ3Jlc3M6IG9wdGlvbnMucHJvZ3Jlc3MsXG4gICAgICByb2xlOiBpc1N0cihvcHRpb25zLnJvbGUpID8gb3B0aW9ucy5yb2xlIDogcHJvcHMucm9sZSxcbiAgICAgIGRlbGV0ZVRvYXN0OiBmdW5jdGlvbiBkZWxldGVUb2FzdCgpIHtcbiAgICAgICAgcmVtb3ZlRnJvbUNvbGxlY3Rpb24odG9hc3RJZCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNGbihvcHRpb25zLm9uT3BlbikpIHRvYXN0UHJvcHMub25PcGVuID0gb3B0aW9ucy5vbk9wZW47XG4gICAgaWYgKGlzRm4ob3B0aW9ucy5vbkNsb3NlKSkgdG9hc3RQcm9wcy5vbkNsb3NlID0gb3B0aW9ucy5vbkNsb3NlOyAvLyAgdHdlYWsgZm9yIHZlcnRpY2FsIGRyYWdnaW5nXG5cbiAgICBpZiAodG9hc3RQcm9wcy5kcmFnZ2FibGVEaXJlY3Rpb24gPT09IFwieVwiXG4gICAgLyogWSAqL1xuICAgICYmIHRvYXN0UHJvcHMuZHJhZ2dhYmxlUGVyY2VudCA9PT0gODBcbiAgICAvKiBEUkFHR0FCTEVfUEVSQ0VOVCAqL1xuICAgICkge1xuICAgICAgICB0b2FzdFByb3BzLmRyYWdnYWJsZVBlcmNlbnQgKj0gMS41O1xuICAgICAgfVxuXG4gICAgdmFyIGNsb3NlQnV0dG9uID0gcHJvcHMuY2xvc2VCdXR0b247XG5cbiAgICBpZiAob3B0aW9ucy5jbG9zZUJ1dHRvbiA9PT0gZmFsc2UgfHwgY2FuQmVSZW5kZXJlZChvcHRpb25zLmNsb3NlQnV0dG9uKSkge1xuICAgICAgY2xvc2VCdXR0b24gPSBvcHRpb25zLmNsb3NlQnV0dG9uO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jbG9zZUJ1dHRvbiA9PT0gdHJ1ZSkge1xuICAgICAgY2xvc2VCdXR0b24gPSBjYW5CZVJlbmRlcmVkKHByb3BzLmNsb3NlQnV0dG9uKSA/IHByb3BzLmNsb3NlQnV0dG9uIDogdHJ1ZTtcbiAgICB9XG5cbiAgICB0b2FzdFByb3BzLmNsb3NlQnV0dG9uID0gY2xvc2VCdXR0b247XG4gICAgdmFyIHRvYXN0Q29udGVudCA9IGNvbnRlbnQ7XG5cbiAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY29udGVudCkgJiYgIWlzU3RyKGNvbnRlbnQudHlwZSkpIHtcbiAgICAgIHRvYXN0Q29udGVudCA9IGNsb25lRWxlbWVudChjb250ZW50LCB7XG4gICAgICAgIGNsb3NlVG9hc3Q6IGNsb3NlVG9hc3QsXG4gICAgICAgIHRvYXN0UHJvcHM6IHRvYXN0UHJvcHNcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNGbihjb250ZW50KSkge1xuICAgICAgdG9hc3RDb250ZW50ID0gY29udGVudCh7XG4gICAgICAgIGNsb3NlVG9hc3Q6IGNsb3NlVG9hc3QsXG4gICAgICAgIHRvYXN0UHJvcHM6IHRvYXN0UHJvcHNcbiAgICAgIH0pO1xuICAgIH0gLy8gbm90IGhhbmRsaW5nIGxpbWl0ICsgZGVsYXkgYnkgZGVzaWduLiBXYWl0aW5nIGZvciB1c2VyIGZlZWRiYWNrIGZpcnN0XG5cblxuICAgIGlmIChwcm9wcy5saW1pdCAmJiBwcm9wcy5saW1pdCA+IDAgJiYgdG9hc3RDb3VudCA+IHByb3BzLmxpbWl0ICYmIGlzTm90QW5VcGRhdGUpIHtcbiAgICAgIHF1ZXVlLnB1c2goe1xuICAgICAgICB0b2FzdENvbnRlbnQ6IHRvYXN0Q29udGVudCxcbiAgICAgICAgdG9hc3RQcm9wczogdG9hc3RQcm9wcyxcbiAgICAgICAgc3RhbGVJZDogc3RhbGVJZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc051bShkZWxheSkgJiYgZGVsYXkgPiAwKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXBwZW5kVG9hc3QodG9hc3RDb250ZW50LCB0b2FzdFByb3BzLCBzdGFsZUlkKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwZW5kVG9hc3QodG9hc3RDb250ZW50LCB0b2FzdFByb3BzLCBzdGFsZUlkKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhcHBlbmRUb2FzdChjb250ZW50LCB0b2FzdFByb3BzLCBzdGFsZUlkKSB7XG4gICAgdmFyIHRvYXN0SWQgPSB0b2FzdFByb3BzLnRvYXN0SWQ7XG4gICAgaWYgKHN0YWxlSWQpIGRlbGV0ZSBjb2xsZWN0aW9uW3N0YWxlSWRdO1xuICAgIGNvbGxlY3Rpb25bdG9hc3RJZF0gPSB7XG4gICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgcHJvcHM6IHRvYXN0UHJvcHNcbiAgICB9O1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IDBcbiAgICAgIC8qIEFERCAqL1xuICAgICAgLFxuICAgICAgdG9hc3RJZDogdG9hc3RJZCxcbiAgICAgIHN0YWxlSWQ6IHN0YWxlSWRcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUZyb21Db2xsZWN0aW9uKHRvYXN0SWQpIHtcbiAgICBkZWxldGUgY29sbGVjdGlvblt0b2FzdElkXTtcbiAgICB2YXIgcXVldWVMZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgdG9hc3RDb3VudCA9IGlzVG9hc3RJZFZhbGlkKHRvYXN0SWQpID8gdG9hc3RDb3VudCAtIDEgOiB0b2FzdENvdW50IC0gaW5zdGFuY2UuZGlzcGxheWVkVG9hc3Q7XG4gICAgaWYgKHRvYXN0Q291bnQgPCAwKSB0b2FzdENvdW50ID0gMDtcblxuICAgIGlmIChxdWV1ZUxlbiA+IDApIHtcbiAgICAgIHZhciBmcmVlU2xvdCA9IGlzVG9hc3RJZFZhbGlkKHRvYXN0SWQpID8gMSA6IGluc3RhbmNlLnByb3BzLmxpbWl0O1xuXG4gICAgICBpZiAocXVldWVMZW4gPT09IDEgfHwgZnJlZVNsb3QgPT09IDEpIHtcbiAgICAgICAgaW5zdGFuY2UuZGlzcGxheWVkVG9hc3QrKztcbiAgICAgICAgZGVxdWV1ZVRvYXN0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdG9EZXF1ZXVlID0gZnJlZVNsb3QgPiBxdWV1ZUxlbiA/IHF1ZXVlTGVuIDogZnJlZVNsb3Q7XG4gICAgICAgIGluc3RhbmNlLmRpc3BsYXllZFRvYXN0ID0gdG9EZXF1ZXVlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9EZXF1ZXVlOyBpKyspIHtcbiAgICAgICAgICBkZXF1ZXVlVG9hc3QoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRvYXN0VG9SZW5kZXIoY2IpIHtcbiAgICB2YXIgdG9hc3RUb1JlbmRlciA9IHt9O1xuICAgIHZhciB0b2FzdExpc3QgPSBwcm9wcy5uZXdlc3RPblRvcCA/IE9iamVjdC5rZXlzKGNvbGxlY3Rpb24pLnJldmVyc2UoKSA6IE9iamVjdC5rZXlzKGNvbGxlY3Rpb24pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2FzdExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBfdG9hc3QgPSBjb2xsZWN0aW9uW3RvYXN0TGlzdFtpXV07XG4gICAgICB2YXIgcG9zaXRpb24gPSBfdG9hc3QucHJvcHMucG9zaXRpb247XG4gICAgICB0b2FzdFRvUmVuZGVyW3Bvc2l0aW9uXSB8fCAodG9hc3RUb1JlbmRlcltwb3NpdGlvbl0gPSBbXSk7XG4gICAgICB0b2FzdFRvUmVuZGVyW3Bvc2l0aW9uXS5wdXNoKF90b2FzdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRvYXN0VG9SZW5kZXIpLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIGNiKHAsIHRvYXN0VG9SZW5kZXJbcF0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRUb2FzdFRvUmVuZGVyOiBnZXRUb2FzdFRvUmVuZGVyLFxuICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24sXG4gICAgY29udGFpbmVyUmVmOiBjb250YWluZXJSZWYsXG4gICAgaXNUb2FzdEFjdGl2ZTogaXNUb2FzdEFjdGl2ZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRYKGUpIHtcbiAgcmV0dXJuIGUudGFyZ2V0VG91Y2hlcyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID49IDEgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCA6IGUuY2xpZW50WDtcbn1cblxuZnVuY3Rpb24gZ2V0WShlKSB7XG4gIHJldHVybiBlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+PSAxID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFkgOiBlLmNsaWVudFk7XG59XG5cbmZ1bmN0aW9uIHVzZVRvYXN0KHByb3BzKSB7XG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSh0cnVlKSxcbiAgICAgIGlzUnVubmluZyA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldElzUnVubmluZyA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgX3VzZVN0YXRlMiA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIHByZXZlbnRFeGl0VHJhbnNpdGlvbiA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRQcmV2ZW50RXhpdFRyYW5zaXRpb24gPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHZhciB0b2FzdFJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGRyYWcgPSB1c2VLZWVwZXIoe1xuICAgIHN0YXJ0OiAwLFxuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICBkZWx0YTogMCxcbiAgICByZW1vdmFsRGlzdGFuY2U6IDAsXG4gICAgY2FuQ2xvc2VPbkNsaWNrOiB0cnVlLFxuICAgIGNhbkRyYWc6IGZhbHNlLFxuICAgIGJvdW5kaW5nUmVjdDogbnVsbFxuICB9KTtcbiAgdmFyIHN5bmNQcm9wcyA9IHVzZUtlZXBlcihwcm9wcywgdHJ1ZSk7XG4gIHZhciBhdXRvQ2xvc2UgPSBwcm9wcy5hdXRvQ2xvc2UsXG4gICAgICBwYXVzZU9uSG92ZXIgPSBwcm9wcy5wYXVzZU9uSG92ZXIsXG4gICAgICBjbG9zZVRvYXN0ID0gcHJvcHMuY2xvc2VUb2FzdCxcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgY2xvc2VPbkNsaWNrID0gcHJvcHMuY2xvc2VPbkNsaWNrO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc0ZuKHByb3BzLm9uT3BlbikpIHByb3BzLm9uT3Blbihpc1ZhbGlkRWxlbWVudChwcm9wcy5jaGlsZHJlbikgJiYgcHJvcHMuY2hpbGRyZW4ucHJvcHMpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNGbihzeW5jUHJvcHMub25DbG9zZSkpIHN5bmNQcm9wcy5vbkNsb3NlKGlzVmFsaWRFbGVtZW50KHN5bmNQcm9wcy5jaGlsZHJlbikgJiYgc3luY1Byb3BzLmNoaWxkcmVuLnByb3BzKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcHJvcHMuZHJhZ2dhYmxlICYmIGJpbmREcmFnRXZlbnRzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb3BzLmRyYWdnYWJsZSAmJiB1bmJpbmREcmFnRXZlbnRzKCk7XG4gICAgfTtcbiAgfSwgW3Byb3BzLmRyYWdnYWJsZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHByb3BzLnBhdXNlT25Gb2N1c0xvc3MgJiYgYmluZEZvY3VzRXZlbnRzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb3BzLnBhdXNlT25Gb2N1c0xvc3MgJiYgdW5iaW5kRm9jdXNFdmVudHMoKTtcbiAgICB9O1xuICB9LCBbcHJvcHMucGF1c2VPbkZvY3VzTG9zc10pO1xuXG4gIGZ1bmN0aW9uIG9uRHJhZ1N0YXJ0KGUpIHtcbiAgICBpZiAocHJvcHMuZHJhZ2dhYmxlKSB7XG4gICAgICB2YXIgdG9hc3QgPSB0b2FzdFJlZi5jdXJyZW50O1xuICAgICAgZHJhZy5jYW5DbG9zZU9uQ2xpY2sgPSB0cnVlO1xuICAgICAgZHJhZy5jYW5EcmFnID0gdHJ1ZTtcbiAgICAgIGRyYWcuYm91bmRpbmdSZWN0ID0gdG9hc3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB0b2FzdC5zdHlsZS50cmFuc2l0aW9uID0gJyc7XG4gICAgICBkcmFnLnggPSBnZXRYKGUubmF0aXZlRXZlbnQpO1xuICAgICAgZHJhZy55ID0gZ2V0WShlLm5hdGl2ZUV2ZW50KTtcblxuICAgICAgaWYgKHByb3BzLmRyYWdnYWJsZURpcmVjdGlvbiA9PT0gXCJ4XCJcbiAgICAgIC8qIFggKi9cbiAgICAgICkge1xuICAgICAgICAgIGRyYWcuc3RhcnQgPSBkcmFnLng7XG4gICAgICAgICAgZHJhZy5yZW1vdmFsRGlzdGFuY2UgPSB0b2FzdC5vZmZzZXRXaWR0aCAqIChwcm9wcy5kcmFnZ2FibGVQZXJjZW50IC8gMTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZy5zdGFydCA9IGRyYWcueTtcbiAgICAgICAgZHJhZy5yZW1vdmFsRGlzdGFuY2UgPSB0b2FzdC5vZmZzZXRIZWlnaHQgKiAocHJvcHMuZHJhZ2dhYmxlUGVyY2VudCAvIDEwMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25EcmFnVHJhbnNpdGlvbkVuZCgpIHtcbiAgICBpZiAoZHJhZy5ib3VuZGluZ1JlY3QpIHtcbiAgICAgIHZhciBfZHJhZyRib3VuZGluZ1JlY3QgPSBkcmFnLmJvdW5kaW5nUmVjdCxcbiAgICAgICAgICB0b3AgPSBfZHJhZyRib3VuZGluZ1JlY3QudG9wLFxuICAgICAgICAgIGJvdHRvbSA9IF9kcmFnJGJvdW5kaW5nUmVjdC5ib3R0b20sXG4gICAgICAgICAgbGVmdCA9IF9kcmFnJGJvdW5kaW5nUmVjdC5sZWZ0LFxuICAgICAgICAgIHJpZ2h0ID0gX2RyYWckYm91bmRpbmdSZWN0LnJpZ2h0O1xuXG4gICAgICBpZiAocHJvcHMucGF1c2VPbkhvdmVyICYmIGRyYWcueCA+PSBsZWZ0ICYmIGRyYWcueCA8PSByaWdodCAmJiBkcmFnLnkgPj0gdG9wICYmIGRyYWcueSA8PSBib3R0b20pIHtcbiAgICAgICAgcGF1c2VUb2FzdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGxheVRvYXN0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGxheVRvYXN0KCkge1xuICAgIHNldElzUnVubmluZyh0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlVG9hc3QoKSB7XG4gICAgc2V0SXNSdW5uaW5nKGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpbmRGb2N1c0V2ZW50cygpIHtcbiAgICBpZiAoIWRvY3VtZW50Lmhhc0ZvY3VzKCkpIHBhdXNlVG9hc3QoKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBwbGF5VG9hc3QpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgcGF1c2VUb2FzdCk7XG4gIH1cblxuICBmdW5jdGlvbiB1bmJpbmRGb2N1c0V2ZW50cygpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBwbGF5VG9hc3QpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgcGF1c2VUb2FzdCk7XG4gIH1cblxuICBmdW5jdGlvbiBiaW5kRHJhZ0V2ZW50cygpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkRyYWdNb3ZlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25EcmFnRW5kKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbkRyYWdNb3ZlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uRHJhZ0VuZCk7XG4gIH1cblxuICBmdW5jdGlvbiB1bmJpbmREcmFnRXZlbnRzKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRHJhZ01vdmUpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbkRyYWdFbmQpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uRHJhZ01vdmUpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25EcmFnRW5kKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRHJhZ01vdmUoZSkge1xuICAgIGlmIChkcmFnLmNhbkRyYWcpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciB0b2FzdCA9IHRvYXN0UmVmLmN1cnJlbnQ7XG4gICAgICBpZiAoaXNSdW5uaW5nKSBwYXVzZVRvYXN0KCk7XG4gICAgICBkcmFnLnggPSBnZXRYKGUpO1xuICAgICAgZHJhZy55ID0gZ2V0WShlKTtcblxuICAgICAgaWYgKHByb3BzLmRyYWdnYWJsZURpcmVjdGlvbiA9PT0gXCJ4XCJcbiAgICAgIC8qIFggKi9cbiAgICAgICkge1xuICAgICAgICAgIGRyYWcuZGVsdGEgPSBkcmFnLnggLSBkcmFnLnN0YXJ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnLmRlbHRhID0gZHJhZy55IC0gZHJhZy5zdGFydDtcbiAgICAgIH0gLy8gcHJldmVudCBmYWxzZSBwb3NpdGlmIGR1cmluZyBhIHRvYXN0IGNsaWNrXG5cblxuICAgICAgaWYgKGRyYWcuc3RhcnQgIT09IGRyYWcueCkgZHJhZy5jYW5DbG9zZU9uQ2xpY2sgPSBmYWxzZTtcbiAgICAgIHRvYXN0LnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlXCIgKyBwcm9wcy5kcmFnZ2FibGVEaXJlY3Rpb24gKyBcIihcIiArIGRyYWcuZGVsdGEgKyBcInB4KVwiO1xuICAgICAgdG9hc3Quc3R5bGUub3BhY2l0eSA9IFwiXCIgKyAoMSAtIE1hdGguYWJzKGRyYWcuZGVsdGEgLyBkcmFnLnJlbW92YWxEaXN0YW5jZSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRHJhZ0VuZCgpIHtcbiAgICB2YXIgdG9hc3QgPSB0b2FzdFJlZi5jdXJyZW50O1xuXG4gICAgaWYgKGRyYWcuY2FuRHJhZykge1xuICAgICAgZHJhZy5jYW5EcmFnID0gZmFsc2U7XG5cbiAgICAgIGlmIChNYXRoLmFicyhkcmFnLmRlbHRhKSA+IGRyYWcucmVtb3ZhbERpc3RhbmNlKSB7XG4gICAgICAgIHNldFByZXZlbnRFeGl0VHJhbnNpdGlvbih0cnVlKTtcbiAgICAgICAgcHJvcHMuY2xvc2VUb2FzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRvYXN0LnN0eWxlLnRyYW5zaXRpb24gPSAndHJhbnNmb3JtIDAuMnMsIG9wYWNpdHkgMC4ycyc7XG4gICAgICB0b2FzdC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVwiICsgcHJvcHMuZHJhZ2dhYmxlRGlyZWN0aW9uICsgXCIoMClcIjtcbiAgICAgIHRvYXN0LnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgfVxuICB9XG5cbiAgdmFyIGV2ZW50SGFuZGxlcnMgPSB7XG4gICAgb25Nb3VzZURvd246IG9uRHJhZ1N0YXJ0LFxuICAgIG9uVG91Y2hTdGFydDogb25EcmFnU3RhcnQsXG4gICAgb25Nb3VzZVVwOiBvbkRyYWdUcmFuc2l0aW9uRW5kLFxuICAgIG9uVG91Y2hFbmQ6IG9uRHJhZ1RyYW5zaXRpb25FbmRcbiAgfTtcblxuICBpZiAoYXV0b0Nsb3NlICYmIHBhdXNlT25Ib3Zlcikge1xuICAgIGV2ZW50SGFuZGxlcnMub25Nb3VzZUVudGVyID0gcGF1c2VUb2FzdDtcbiAgICBldmVudEhhbmRsZXJzLm9uTW91c2VMZWF2ZSA9IHBsYXlUb2FzdDtcbiAgfSAvLyBwcmV2ZW50IHRvYXN0IGZyb20gY2xvc2luZyB3aGVuIHVzZXIgZHJhZ3MgdGhlIHRvYXN0XG5cblxuICBpZiAoY2xvc2VPbkNsaWNrKSB7XG4gICAgZXZlbnRIYW5kbGVycy5vbkNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIG9uQ2xpY2sgJiYgb25DbGljayhlKTtcbiAgICAgIGRyYWcuY2FuQ2xvc2VPbkNsaWNrICYmIGNsb3NlVG9hc3QoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwbGF5VG9hc3Q6IHBsYXlUb2FzdCxcbiAgICBwYXVzZVRvYXN0OiBwYXVzZVRvYXN0LFxuICAgIGlzUnVubmluZzogaXNSdW5uaW5nLFxuICAgIHByZXZlbnRFeGl0VHJhbnNpdGlvbjogcHJldmVudEV4aXRUcmFuc2l0aW9uLFxuICAgIHRvYXN0UmVmOiB0b2FzdFJlZixcbiAgICBldmVudEhhbmRsZXJzOiBldmVudEhhbmRsZXJzXG4gIH07XG59XG5cbmZ1bmN0aW9uIENsb3NlQnV0dG9uKF9yZWYpIHtcbiAgdmFyIGNsb3NlVG9hc3QgPSBfcmVmLmNsb3NlVG9hc3QsXG4gICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgX3JlZiRhcmlhTGFiZWwgPSBfcmVmLmFyaWFMYWJlbCxcbiAgICAgIGFyaWFMYWJlbCA9IF9yZWYkYXJpYUxhYmVsID09PSB2b2lkIDAgPyAnY2xvc2UnIDogX3JlZiRhcmlhTGFiZWw7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiVG9hc3RpZnlcIlxuICAgIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgICArIFwiX19jbG9zZS1idXR0b24gXCIgKyBcIlRvYXN0aWZ5XCJcbiAgICAvKiBDU1NfTkFNRVNQQUNFICovXG4gICAgKyBcIl9fY2xvc2UtYnV0dG9uLS1cIiArIHR5cGUsXG4gICAgdHlwZTogXCJidXR0b25cIixcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBjbG9zZVRvYXN0KGUpO1xuICAgIH0sXG4gICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbFxuICB9LCBjcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDE0IDE2XCJcbiAgfSwgY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk03LjcxIDguMjNsMy43NSAzLjc1LTEuNDggMS40OC0zLjc1LTMuNzUtMy43NSAzLjc1TDEgMTEuOThsMy43NS0zLjc1TDEgNC40OCAyLjQ4IDNsMy43NSAzLjc1TDkuOTggM2wxLjQ4IDEuNDgtMy43NSAzLjc1elwiXG4gIH0pKSk7XG59XG5cbmZ1bmN0aW9uIFByb2dyZXNzQmFyKF9yZWYpIHtcbiAgdmFyIF9jeCwgX2FuaW1hdGlvbkV2ZW50O1xuXG4gIHZhciBkZWxheSA9IF9yZWYuZGVsYXksXG4gICAgICBpc1J1bm5pbmcgPSBfcmVmLmlzUnVubmluZyxcbiAgICAgIGNsb3NlVG9hc3QgPSBfcmVmLmNsb3NlVG9hc3QsXG4gICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgaGlkZSA9IF9yZWYuaGlkZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgdXNlclN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGNvbnRyb2xsZWRQcm9ncmVzcyA9IF9yZWYuY29udHJvbGxlZFByb2dyZXNzLFxuICAgICAgcHJvZ3Jlc3MgPSBfcmVmLnByb2dyZXNzLFxuICAgICAgcnRsID0gX3JlZi5ydGwsXG4gICAgICBpc0luID0gX3JlZi5pc0luO1xuXG4gIHZhciBzdHlsZSA9IF9leHRlbmRzKHt9LCB1c2VyU3R5bGUsIHtcbiAgICBhbmltYXRpb25EdXJhdGlvbjogZGVsYXkgKyBcIm1zXCIsXG4gICAgYW5pbWF0aW9uUGxheVN0YXRlOiBpc1J1bm5pbmcgPyAncnVubmluZycgOiAncGF1c2VkJyxcbiAgICBvcGFjaXR5OiBoaWRlID8gMCA6IDFcbiAgfSk7XG5cbiAgaWYgKGNvbnRyb2xsZWRQcm9ncmVzcykgc3R5bGUudHJhbnNmb3JtID0gXCJzY2FsZVgoXCIgKyBwcm9ncmVzcyArIFwiKVwiO1xuICB2YXIgZGVmYXVsdENsYXNzTmFtZSA9IGN4KFwiVG9hc3RpZnlcIlxuICAvKiBDU1NfTkFNRVNQQUNFICovXG4gICsgXCJfX3Byb2dyZXNzLWJhclwiLCBjb250cm9sbGVkUHJvZ3Jlc3MgPyBcIlRvYXN0aWZ5XCJcbiAgLyogQ1NTX05BTUVTUEFDRSAqL1xuICArIFwiX19wcm9ncmVzcy1iYXItLWNvbnRyb2xsZWRcIiA6IFwiVG9hc3RpZnlcIlxuICAvKiBDU1NfTkFNRVNQQUNFICovXG4gICsgXCJfX3Byb2dyZXNzLWJhci0tYW5pbWF0ZWRcIiwgXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fcHJvZ3Jlc3MtYmFyLS1cIiArIHR5cGUsIChfY3ggPSB7fSwgX2N4W1wiVG9hc3RpZnlcIlxuICAvKiBDU1NfTkFNRVNQQUNFICovXG4gICsgXCJfX3Byb2dyZXNzLWJhci0tcnRsXCJdID0gcnRsLCBfY3gpKTtcbiAgdmFyIGNsYXNzTmFtZXMgPSBpc0ZuKGNsYXNzTmFtZSkgPyBjbGFzc05hbWUoe1xuICAgIHJ0bDogcnRsLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgZGVmYXVsdENsYXNzTmFtZTogZGVmYXVsdENsYXNzTmFtZVxuICB9KSA6IGN4KGRlZmF1bHRDbGFzc05hbWUsIGNsYXNzTmFtZSk7IC8vIPCfp5AgY29udHJvbGxlZFByb2dyZXNzIGlzIGRlcml2ZWQgZnJvbSBwcm9ncmVzc1xuICAvLyBzbyBpZiBjb250cm9sbGVkUHJvZ3Jlc3MgaXMgc2V0XG4gIC8vIGl0IG1lYW5zIHRoYXQgdGhpcyBpcyBhbHNvIHRoZSBjYXNlIGZvciBwcm9ncmVzc1xuXG4gIHZhciBhbmltYXRpb25FdmVudCA9IChfYW5pbWF0aW9uRXZlbnQgPSB7fSwgX2FuaW1hdGlvbkV2ZW50W2NvbnRyb2xsZWRQcm9ncmVzcyAmJiBwcm9ncmVzcyA+PSAxID8gJ29uVHJhbnNpdGlvbkVuZCcgOiAnb25BbmltYXRpb25FbmQnXSA9IGNvbnRyb2xsZWRQcm9ncmVzcyAmJiBwcm9ncmVzcyA8IDEgPyBudWxsIDogZnVuY3Rpb24gKCkge1xuICAgIGlzSW4gJiYgY2xvc2VUb2FzdCgpO1xuICB9LCBfYW5pbWF0aW9uRXZlbnQpOyAvLyBUT0RPOiBhZGQgYXJpYS12YWx1ZW5vdywgYXJpYS12YWx1ZW1heCwgYXJpYS12YWx1ZW1pblxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIE9iamVjdC5hc3NpZ24oe1xuICAgIHJvbGU6IFwicHJvZ3Jlc3NiYXJcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IGhpZGUgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBcIm5vdGlmaWNhdGlvbiB0aW1lclwiLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyxcbiAgICBzdHlsZTogc3R5bGVcbiAgfSwgYW5pbWF0aW9uRXZlbnQpKTtcbn1cblByb2dyZXNzQmFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogVFlQRS5ERUZBVUxULFxuICBoaWRlOiBmYWxzZVxufTtcblxudmFyIFRvYXN0ID0gZnVuY3Rpb24gVG9hc3QocHJvcHMpIHtcbiAgdmFyIF9jeDtcblxuICB2YXIgX3VzZVRvYXN0ID0gdXNlVG9hc3QocHJvcHMpLFxuICAgICAgaXNSdW5uaW5nID0gX3VzZVRvYXN0LmlzUnVubmluZyxcbiAgICAgIHByZXZlbnRFeGl0VHJhbnNpdGlvbiA9IF91c2VUb2FzdC5wcmV2ZW50RXhpdFRyYW5zaXRpb24sXG4gICAgICB0b2FzdFJlZiA9IF91c2VUb2FzdC50b2FzdFJlZixcbiAgICAgIGV2ZW50SGFuZGxlcnMgPSBfdXNlVG9hc3QuZXZlbnRIYW5kbGVycztcblxuICB2YXIgY2xvc2VCdXR0b24gPSBwcm9wcy5jbG9zZUJ1dHRvbixcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBhdXRvQ2xvc2UgPSBwcm9wcy5hdXRvQ2xvc2UsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgaGlkZVByb2dyZXNzQmFyID0gcHJvcHMuaGlkZVByb2dyZXNzQmFyLFxuICAgICAgY2xvc2VUb2FzdCA9IHByb3BzLmNsb3NlVG9hc3QsXG4gICAgICBUcmFuc2l0aW9uID0gcHJvcHMudHJhbnNpdGlvbixcbiAgICAgIHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgYm9keUNsYXNzTmFtZSA9IHByb3BzLmJvZHlDbGFzc05hbWUsXG4gICAgICBib2R5U3R5bGUgPSBwcm9wcy5ib2R5U3R5bGUsXG4gICAgICBwcm9ncmVzc0NsYXNzTmFtZSA9IHByb3BzLnByb2dyZXNzQ2xhc3NOYW1lLFxuICAgICAgcHJvZ3Jlc3NTdHlsZSA9IHByb3BzLnByb2dyZXNzU3R5bGUsXG4gICAgICB1cGRhdGVJZCA9IHByb3BzLnVwZGF0ZUlkLFxuICAgICAgcm9sZSA9IHByb3BzLnJvbGUsXG4gICAgICBwcm9ncmVzcyA9IHByb3BzLnByb2dyZXNzLFxuICAgICAgcnRsID0gcHJvcHMucnRsLFxuICAgICAgdG9hc3RJZCA9IHByb3BzLnRvYXN0SWQsXG4gICAgICBkZWxldGVUb2FzdCA9IHByb3BzLmRlbGV0ZVRvYXN0LFxuICAgICAgaXNJbiA9IHByb3BzLmlzSW47XG4gIHZhciBkZWZhdWx0Q2xhc3NOYW1lID0gY3goXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fdG9hc3RcIiwgXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fdG9hc3QtLVwiICsgdHlwZSwgKF9jeCA9IHt9LCBfY3hbXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fdG9hc3QtLXJ0bFwiXSA9IHJ0bCwgX2N4KSk7XG4gIHZhciBjc3NDbGFzc2VzID0gaXNGbihjbGFzc05hbWUpID8gY2xhc3NOYW1lKHtcbiAgICBydGw6IHJ0bCxcbiAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgdHlwZTogdHlwZSxcbiAgICBkZWZhdWx0Q2xhc3NOYW1lOiBkZWZhdWx0Q2xhc3NOYW1lXG4gIH0pIDogY3goZGVmYXVsdENsYXNzTmFtZSwgY2xhc3NOYW1lKTtcbiAgdmFyIGlzUHJvZ3Jlc3NDb250cm9sbGVkID0gISFwcm9ncmVzcztcblxuICBmdW5jdGlvbiByZW5kZXJDbG9zZUJ1dHRvbihjbG9zZUJ1dHRvbikge1xuICAgIGlmICghY2xvc2VCdXR0b24pIHJldHVybjtcbiAgICB2YXIgcHJvcHMgPSB7XG4gICAgICBjbG9zZVRvYXN0OiBjbG9zZVRvYXN0LFxuICAgICAgdHlwZTogdHlwZVxuICAgIH07XG4gICAgaWYgKGlzRm4oY2xvc2VCdXR0b24pKSByZXR1cm4gY2xvc2VCdXR0b24ocHJvcHMpO1xuICAgIGlmIChpc1ZhbGlkRWxlbWVudChjbG9zZUJ1dHRvbikpIHJldHVybiBjbG9uZUVsZW1lbnQoY2xvc2VCdXR0b24sIHByb3BzKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIHtcbiAgICBpc0luOiBpc0luLFxuICAgIGRvbmU6IGRlbGV0ZVRvYXN0LFxuICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICBwcmV2ZW50RXhpdFRyYW5zaXRpb246IHByZXZlbnRFeGl0VHJhbnNpdGlvbixcbiAgICBub2RlUmVmOiB0b2FzdFJlZlxuICB9LCBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIE9iamVjdC5hc3NpZ24oe1xuICAgIGlkOiB0b2FzdElkLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgY2xhc3NOYW1lOiBjc3NDbGFzc2VzXG4gIH0sIGV2ZW50SGFuZGxlcnMsIHtcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgcmVmOiB0b2FzdFJlZlxuICB9KSwgY3JlYXRlRWxlbWVudChcImRpdlwiLCBPYmplY3QuYXNzaWduKHt9LCBpc0luICYmIHtcbiAgICByb2xlOiByb2xlXG4gIH0sIHtcbiAgICBjbGFzc05hbWU6IGlzRm4oYm9keUNsYXNzTmFtZSkgPyBib2R5Q2xhc3NOYW1lKHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9KSA6IGN4KFwiVG9hc3RpZnlcIlxuICAgIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgICArIFwiX190b2FzdC1ib2R5XCIsIGJvZHlDbGFzc05hbWUpLFxuICAgIHN0eWxlOiBib2R5U3R5bGVcbiAgfSksIGNoaWxkcmVuKSwgcmVuZGVyQ2xvc2VCdXR0b24oY2xvc2VCdXR0b24pLCAoYXV0b0Nsb3NlIHx8IGlzUHJvZ3Jlc3NDb250cm9sbGVkKSAmJiBjcmVhdGVFbGVtZW50KFByb2dyZXNzQmFyLCBPYmplY3QuYXNzaWduKHt9LCB1cGRhdGVJZCAmJiAhaXNQcm9ncmVzc0NvbnRyb2xsZWQgPyB7XG4gICAga2V5OiBcInBiLVwiICsgdXBkYXRlSWRcbiAgfSA6IHt9LCB7XG4gICAgcnRsOiBydGwsXG4gICAgZGVsYXk6IGF1dG9DbG9zZSxcbiAgICBpc1J1bm5pbmc6IGlzUnVubmluZyxcbiAgICBpc0luOiBpc0luLFxuICAgIGNsb3NlVG9hc3Q6IGNsb3NlVG9hc3QsXG4gICAgaGlkZTogaGlkZVByb2dyZXNzQmFyLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgc3R5bGU6IHByb2dyZXNzU3R5bGUsXG4gICAgY2xhc3NOYW1lOiBwcm9ncmVzc0NsYXNzTmFtZSxcbiAgICBjb250cm9sbGVkUHJvZ3Jlc3M6IGlzUHJvZ3Jlc3NDb250cm9sbGVkLFxuICAgIHByb2dyZXNzOiBwcm9ncmVzc1xuICB9KSkpKTtcbn07XG5cbnZhciBCb3VuY2UgPSAvKiNfX1BVUkVfXyovY3NzVHJhbnNpdGlvbih7XG4gIGVudGVyOiBcIlRvYXN0aWZ5XCJcbiAgLyogQ1NTX05BTUVTUEFDRSAqL1xuICArIFwiLS1hbmltYXRlIFwiICsgXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fYm91bmNlLWVudGVyXCIsXG4gIGV4aXQ6IFwiVG9hc3RpZnlcIlxuICAvKiBDU1NfTkFNRVNQQUNFICovXG4gICsgXCItLWFuaW1hdGUgXCIgKyBcIlRvYXN0aWZ5XCJcbiAgLyogQ1NTX05BTUVTUEFDRSAqL1xuICArIFwiX19ib3VuY2UtZXhpdFwiLFxuICBhcHBlbmRQb3NpdGlvbjogdHJ1ZVxufSk7XG52YXIgU2xpZGUgPSAvKiNfX1BVUkVfXyovY3NzVHJhbnNpdGlvbih7XG4gIGVudGVyOiBcIlRvYXN0aWZ5XCJcbiAgLyogQ1NTX05BTUVTUEFDRSAqL1xuICArIFwiLS1hbmltYXRlIFwiICsgXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fc2xpZGUtZW50ZXJcIixcbiAgZXhpdDogXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIi0tYW5pbWF0ZSBcIiArIFwiVG9hc3RpZnlcIlxuICAvKiBDU1NfTkFNRVNQQUNFICovXG4gICsgXCJfX3NsaWRlLWV4aXRcIixcbiAgYXBwZW5kUG9zaXRpb246IHRydWVcbn0pO1xudmFyIFpvb20gPSAvKiNfX1BVUkVfXyovY3NzVHJhbnNpdGlvbih7XG4gIGVudGVyOiBcIlRvYXN0aWZ5XCJcbiAgLyogQ1NTX05BTUVTUEFDRSAqL1xuICArIFwiLS1hbmltYXRlIFwiICsgXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fem9vbS1lbnRlclwiLFxuICBleGl0OiBcIlRvYXN0aWZ5XCJcbiAgLyogQ1NTX05BTUVTUEFDRSAqL1xuICArIFwiLS1hbmltYXRlIFwiICsgXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fem9vbS1leGl0XCJcbn0pO1xudmFyIEZsaXAgPSAvKiNfX1BVUkVfXyovY3NzVHJhbnNpdGlvbih7XG4gIGVudGVyOiBcIlRvYXN0aWZ5XCJcbiAgLyogQ1NTX05BTUVTUEFDRSAqL1xuICArIFwiLS1hbmltYXRlIFwiICsgXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fZmxpcC1lbnRlclwiLFxuICBleGl0OiBcIlRvYXN0aWZ5XCJcbiAgLyogQ1NTX05BTUVTUEFDRSAqL1xuICArIFwiLS1hbmltYXRlIFwiICsgXCJUb2FzdGlmeVwiXG4gIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgKyBcIl9fZmxpcC1leGl0XCJcbn0pO1xuXG52YXIgVG9hc3RDb250YWluZXIgPSBmdW5jdGlvbiBUb2FzdENvbnRhaW5lcihwcm9wcykge1xuICB2YXIgX3VzZVRvYXN0Q29udGFpbmVyID0gdXNlVG9hc3RDb250YWluZXIocHJvcHMpLFxuICAgICAgZ2V0VG9hc3RUb1JlbmRlciA9IF91c2VUb2FzdENvbnRhaW5lci5nZXRUb2FzdFRvUmVuZGVyLFxuICAgICAgY29udGFpbmVyUmVmID0gX3VzZVRvYXN0Q29udGFpbmVyLmNvbnRhaW5lclJlZixcbiAgICAgIGlzVG9hc3RBY3RpdmUgPSBfdXNlVG9hc3RDb250YWluZXIuaXNUb2FzdEFjdGl2ZTtcblxuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHJ0bCA9IHByb3BzLnJ0bCxcbiAgICAgIGNvbnRhaW5lcklkID0gcHJvcHMuY29udGFpbmVySWQ7XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHBvc2l0aW9uKSB7XG4gICAgdmFyIF9jeDtcblxuICAgIHZhciBkZWZhdWx0Q2xhc3NOYW1lID0gY3goXCJUb2FzdGlmeVwiXG4gICAgLyogQ1NTX05BTUVTUEFDRSAqL1xuICAgICsgXCJfX3RvYXN0LWNvbnRhaW5lclwiLCBcIlRvYXN0aWZ5XCJcbiAgICAvKiBDU1NfTkFNRVNQQUNFICovXG4gICAgKyBcIl9fdG9hc3QtY29udGFpbmVyLS1cIiArIHBvc2l0aW9uLCAoX2N4ID0ge30sIF9jeFtcIlRvYXN0aWZ5XCJcbiAgICAvKiBDU1NfTkFNRVNQQUNFICovXG4gICAgKyBcIl9fdG9hc3QtY29udGFpbmVyLS1ydGxcIl0gPSBydGwsIF9jeCkpO1xuICAgIHJldHVybiBpc0ZuKGNsYXNzTmFtZSkgPyBjbGFzc05hbWUoe1xuICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgcnRsOiBydGwsXG4gICAgICBkZWZhdWx0Q2xhc3NOYW1lOiBkZWZhdWx0Q2xhc3NOYW1lXG4gICAgfSkgOiBjeChkZWZhdWx0Q2xhc3NOYW1lLCBwYXJzZUNsYXNzTmFtZShjbGFzc05hbWUpKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICByZWY6IGNvbnRhaW5lclJlZixcbiAgICBjbGFzc05hbWU6IFwiVG9hc3RpZnlcIlxuICAgIC8qIENTU19OQU1FU1BBQ0UgKi9cbiAgICAsXG4gICAgaWQ6IGNvbnRhaW5lcklkXG4gIH0sIGdldFRvYXN0VG9SZW5kZXIoZnVuY3Rpb24gKHBvc2l0aW9uLCB0b2FzdExpc3QpIHtcbiAgICB2YXIgY29udGFpbmVyU3R5bGUgPSB0b2FzdExpc3QubGVuZ3RoID09PSAwID8gX2V4dGVuZHMoe30sIHN0eWxlLCB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICB9KSA6IF9leHRlbmRzKHt9LCBzdHlsZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBnZXRDbGFzc05hbWUocG9zaXRpb24pLFxuICAgICAgc3R5bGU6IGNvbnRhaW5lclN0eWxlLFxuICAgICAga2V5OiBcImNvbnRhaW5lci1cIiArIHBvc2l0aW9uXG4gICAgfSwgdG9hc3RMaXN0Lm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGNvbnRlbnQgPSBfcmVmLmNvbnRlbnQsXG4gICAgICAgICAgdG9hc3RQcm9wcyA9IF9yZWYucHJvcHM7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChUb2FzdCwgT2JqZWN0LmFzc2lnbih7fSwgdG9hc3RQcm9wcywge1xuICAgICAgICBpc0luOiBpc1RvYXN0QWN0aXZlKHRvYXN0UHJvcHMudG9hc3RJZCksXG4gICAgICAgIGtleTogXCJ0b2FzdC1cIiArIHRvYXN0UHJvcHMua2V5LFxuICAgICAgICBjbG9zZUJ1dHRvbjogdG9hc3RQcm9wcy5jbG9zZUJ1dHRvbiA9PT0gdHJ1ZSA/IENsb3NlQnV0dG9uIDogdG9hc3RQcm9wcy5jbG9zZUJ1dHRvblxuICAgICAgfSksIGNvbnRlbnQpO1xuICAgIH0pKTtcbiAgfSkpO1xufTtcblRvYXN0Q29udGFpbmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgcG9zaXRpb246IFBPU0lUSU9OLlRPUF9SSUdIVCxcbiAgdHJhbnNpdGlvbjogQm91bmNlLFxuICBydGw6IGZhbHNlLFxuICBhdXRvQ2xvc2U6IDUwMDAsXG4gIGhpZGVQcm9ncmVzc0JhcjogZmFsc2UsXG4gIGNsb3NlQnV0dG9uOiBDbG9zZUJ1dHRvbixcbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICBwYXVzZU9uRm9jdXNMb3NzOiB0cnVlLFxuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIG5ld2VzdE9uVG9wOiBmYWxzZSxcbiAgZHJhZ2dhYmxlOiB0cnVlLFxuICBkcmFnZ2FibGVQZXJjZW50OiA4MFxuICAvKiBEUkFHR0FCTEVfUEVSQ0VOVCAqL1xuICAsXG4gIGRyYWdnYWJsZURpcmVjdGlvbjogXCJ4XCJcbiAgLyogWCAqL1xuICAsXG4gIHJvbGU6ICdhbGVydCdcbn07XG5cbnZhciBjb250YWluZXJzID0gLyojX19QVVJFX18qL25ldyBNYXAoKTtcbnZhciBsYXRlc3RJbnN0YW5jZTtcbnZhciBjb250YWluZXJEb21Ob2RlO1xudmFyIGNvbnRhaW5lckNvbmZpZztcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGxhenkgPSBmYWxzZTtcbi8qKlxyXG4gKiBDaGVjayB3aGV0aGVyIGFueSBjb250YWluZXIgaXMgY3VycmVudGx5IG1vdW50ZWQgaW4gdGhlIERPTVxyXG4gKi9cblxuZnVuY3Rpb24gaXNBbnlDb250YWluZXJNb3VudGVkKCkge1xuICByZXR1cm4gY29udGFpbmVycy5zaXplID4gMDtcbn1cbi8qKlxyXG4gKiBHZXQgdGhlIHRvYXN0IGJ5IGlkLCBnaXZlbiBpdCdzIGluIHRoZSBET00sIG90aGVyd2lzZSByZXR1cm5zIG51bGxcclxuICovXG5cblxuZnVuY3Rpb24gZ2V0VG9hc3QodG9hc3RJZCwgX3JlZikge1xuICB2YXIgY29udGFpbmVySWQgPSBfcmVmLmNvbnRhaW5lcklkO1xuICB2YXIgY29udGFpbmVyID0gY29udGFpbmVycy5nZXQoY29udGFpbmVySWQgfHwgbGF0ZXN0SW5zdGFuY2UpO1xuICBpZiAoIWNvbnRhaW5lcikgcmV0dXJuIG51bGw7XG4gIHJldHVybiBjb250YWluZXIuZ2V0VG9hc3QodG9hc3RJZCk7XG59XG4vKipcclxuICogR2VuZXJhdGUgYSByYW5kb20gdG9hc3RJZFxyXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVRvYXN0SWQoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG59XG4vKipcclxuICogR2VuZXJhdGUgYSB0b2FzdElkIG9yIHVzZSB0aGUgb25lIHByb3ZpZGVkXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRvYXN0SWQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiAoaXNTdHIob3B0aW9ucy50b2FzdElkKSB8fCBpc051bShvcHRpb25zLnRvYXN0SWQpKSkge1xuICAgIHJldHVybiBvcHRpb25zLnRvYXN0SWQ7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdGVUb2FzdElkKCk7XG59XG4vKipcclxuICogSWYgdGhlIGNvbnRhaW5lciBpcyBub3QgbW91bnRlZCwgdGhlIHRvYXN0IGlzIGVucXVldWVkIGFuZFxyXG4gKiB0aGUgY29udGFpbmVyIGxhenkgbW91bnRlZFxyXG4gKi9cblxuXG5mdW5jdGlvbiBkaXNwYXRjaFRvYXN0KGNvbnRlbnQsIG9wdGlvbnMpIHtcbiAgaWYgKGlzQW55Q29udGFpbmVyTW91bnRlZCgpKSB7XG4gICAgZXZlbnRNYW5hZ2VyLmVtaXQoMFxuICAgIC8qIFNob3cgKi9cbiAgICAsIGNvbnRlbnQsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlLnB1c2goe1xuICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICB9KTtcblxuICAgIGlmIChsYXp5ICYmIGNhblVzZURvbSkge1xuICAgICAgbGF6eSA9IGZhbHNlO1xuICAgICAgY29udGFpbmVyRG9tTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXJEb21Ob2RlKTtcbiAgICAgIHJlbmRlcihjcmVhdGVFbGVtZW50KFRvYXN0Q29udGFpbmVyLCBPYmplY3QuYXNzaWduKHt9LCBjb250YWluZXJDb25maWcpKSwgY29udGFpbmVyRG9tTm9kZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnMudG9hc3RJZDtcbn1cbi8qKlxyXG4gKiBNZXJnZSBwcm92aWRlZCBvcHRpb25zIHdpdGggdGhlIGRlZmF1bHRzIHNldHRpbmdzIGFuZCBnZW5lcmF0ZSB0aGUgdG9hc3RJZFxyXG4gKi9cblxuXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnModHlwZSwgb3B0aW9ucykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICB0eXBlOiBvcHRpb25zICYmIG9wdGlvbnMudHlwZSB8fCB0eXBlLFxuICAgIHRvYXN0SWQ6IGdldFRvYXN0SWQob3B0aW9ucylcbiAgfSk7XG59XG5cbnZhciBjcmVhdGVUb2FzdEJ5VHlwZSA9IGZ1bmN0aW9uIGNyZWF0ZVRvYXN0QnlUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZW50LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoVG9hc3QoY29udGVudCwgbWVyZ2VPcHRpb25zKHR5cGUsIG9wdGlvbnMpKTtcbiAgfTtcbn07XG5cbnZhciB0b2FzdCA9IGZ1bmN0aW9uIHRvYXN0KGNvbnRlbnQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGRpc3BhdGNoVG9hc3QoY29udGVudCwgbWVyZ2VPcHRpb25zKFRZUEUuREVGQVVMVCwgb3B0aW9ucykpO1xufTtcblxudG9hc3Quc3VjY2VzcyA9IC8qI19fUFVSRV9fKi9jcmVhdGVUb2FzdEJ5VHlwZShUWVBFLlNVQ0NFU1MpO1xudG9hc3QuaW5mbyA9IC8qI19fUFVSRV9fKi9jcmVhdGVUb2FzdEJ5VHlwZShUWVBFLklORk8pO1xudG9hc3QuZXJyb3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlVG9hc3RCeVR5cGUoVFlQRS5FUlJPUik7XG50b2FzdC53YXJuaW5nID0gLyojX19QVVJFX18qL2NyZWF0ZVRvYXN0QnlUeXBlKFRZUEUuV0FSTklORyk7XG50b2FzdC5kYXJrID0gLyojX19QVVJFX18qL2NyZWF0ZVRvYXN0QnlUeXBlKFRZUEUuREFSSyk7XG50b2FzdC53YXJuID0gdG9hc3Qud2FybmluZztcbi8qKlxyXG4gKiBSZW1vdmUgdG9hc3QgcHJvZ3JhbW1hdGljYWx5XHJcbiAqL1xuXG50b2FzdC5kaXNtaXNzID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBldmVudE1hbmFnZXIuZW1pdCgxXG4gIC8qIENsZWFyICovXG4gICwgaWQpO1xufTtcbi8qKlxyXG4gKiBDbGVhciB3YWl0aW5nIHF1ZXVlIHdoZW4gbGltaXQgaXMgdXNlZFxyXG4gKi9cblxuXG50b2FzdC5jbGVhcldhaXRpbmdRdWV1ZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gZXZlbnRNYW5hZ2VyLmVtaXQoNVxuICAvKiBDbGVhcldhaXRpbmdRdWV1ZSAqL1xuICAsIHBhcmFtcyk7XG59O1xuLyoqXHJcbiAqIHJldHVybiB0cnVlIGlmIG9uZSBjb250YWluZXIgaXMgZGlzcGxheWluZyB0aGUgdG9hc3RcclxuICovXG5cblxudG9hc3QuaXNBY3RpdmUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIGlzVG9hc3RBY3RpdmUgPSBmYWxzZTtcbiAgY29udGFpbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICBpZiAoY29udGFpbmVyLmlzVG9hc3RBY3RpdmUgJiYgY29udGFpbmVyLmlzVG9hc3RBY3RpdmUoaWQpKSB7XG4gICAgICBpc1RvYXN0QWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaXNUb2FzdEFjdGl2ZTtcbn07XG5cbnRvYXN0LnVwZGF0ZSA9IGZ1bmN0aW9uICh0b2FzdElkLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICAvLyBpZiB5b3UgY2FsbCB0b2FzdCBhbmQgdG9hc3QudXBkYXRlIGRpcmVjdGx5IG5vdGhpbmcgd2lsbCBiZSBkaXNwbGF5ZWRcbiAgLy8gdGhpcyBpcyB3aHkgSSBkZWZlcmVkIHRoZSB1cGRhdGVcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRvYXN0ID0gZ2V0VG9hc3QodG9hc3RJZCwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9hc3QpIHtcbiAgICAgIHZhciBvbGRPcHRpb25zID0gdG9hc3QucHJvcHMsXG4gICAgICAgICAgb2xkQ29udGVudCA9IHRvYXN0LmNvbnRlbnQ7XG5cbiAgICAgIHZhciBuZXh0T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvbGRPcHRpb25zLCBvcHRpb25zLCB7XG4gICAgICAgIHRvYXN0SWQ6IG9wdGlvbnMudG9hc3RJZCB8fCB0b2FzdElkLFxuICAgICAgICB1cGRhdGVJZDogZ2VuZXJhdGVUb2FzdElkKClcbiAgICAgIH0pO1xuXG4gICAgICBpZiAobmV4dE9wdGlvbnMudG9hc3RJZCAhPT0gdG9hc3RJZCkgbmV4dE9wdGlvbnMuc3RhbGVJZCA9IHRvYXN0SWQ7XG4gICAgICB2YXIgY29udGVudCA9IG5leHRPcHRpb25zLnJlbmRlciB8fCBvbGRDb250ZW50O1xuICAgICAgZGVsZXRlIG5leHRPcHRpb25zLnJlbmRlcjtcbiAgICAgIGRpc3BhdGNoVG9hc3QoY29udGVudCwgbmV4dE9wdGlvbnMpO1xuICAgIH1cbiAgfSwgMCk7XG59O1xuLyoqXHJcbiAqIFVzZWQgZm9yIGNvbnRyb2xsZWQgcHJvZ3Jlc3MgYmFyLlxyXG4gKi9cblxuXG50b2FzdC5kb25lID0gZnVuY3Rpb24gKGlkKSB7XG4gIHRvYXN0LnVwZGF0ZShpZCwge1xuICAgIHByb2dyZXNzOiAxXG4gIH0pO1xufTtcbi8qKlxyXG4gKiBUcmFjayBjaGFuZ2VzLiBUaGUgY2FsbGJhY2sgZ2V0IHRoZSBudW1iZXIgb2YgdG9hc3QgZGlzcGxheWVkXHJcbiAqXHJcbiAqL1xuXG5cbnRvYXN0Lm9uQ2hhbmdlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIGlmIChpc0ZuKGNhbGxiYWNrKSkge1xuICAgIGV2ZW50TWFuYWdlci5vbig0XG4gICAgLyogQ2hhbmdlICovXG4gICAgLCBjYWxsYmFjayk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlzRm4oY2FsbGJhY2spICYmIGV2ZW50TWFuYWdlci5vZmYoNFxuICAgIC8qIENoYW5nZSAqL1xuICAgICwgY2FsbGJhY2spO1xuICB9O1xufTtcbi8qKlxyXG4gKiBDb25maWd1cmUgdGhlIFRvYXN0Q29udGFpbmVyIHdoZW4gbGF6eSBtb3VudGVkXHJcbiAqL1xuXG5cbnRvYXN0LmNvbmZpZ3VyZSA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgY29uZmlnID0ge307XG4gIH1cblxuICBsYXp5ID0gdHJ1ZTtcbiAgY29udGFpbmVyQ29uZmlnID0gY29uZmlnO1xufTtcblxudG9hc3QuUE9TSVRJT04gPSBQT1NJVElPTjtcbnRvYXN0LlRZUEUgPSBUWVBFO1xuLyoqXHJcbiAqIFdhaXQgdW50aWwgdGhlIFRvYXN0Q29udGFpbmVyIGlzIG1vdW50ZWQgdG8gZGlzcGF0Y2ggdGhlIHRvYXN0XHJcbiAqIGFuZCBhdHRhY2ggaXNBY3RpdmUgbWV0aG9kXHJcbiAqL1xuXG5ldmVudE1hbmFnZXIub24oMlxuLyogRGlkTW91bnQgKi9cbiwgZnVuY3Rpb24gKGNvbnRhaW5lckluc3RhbmNlKSB7XG4gIGxhdGVzdEluc3RhbmNlID0gY29udGFpbmVySW5zdGFuY2UuY29udGFpbmVySWQgfHwgY29udGFpbmVySW5zdGFuY2U7XG4gIGNvbnRhaW5lcnMuc2V0KGxhdGVzdEluc3RhbmNlLCBjb250YWluZXJJbnN0YW5jZSk7XG4gIHF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBldmVudE1hbmFnZXIuZW1pdCgwXG4gICAgLyogU2hvdyAqL1xuICAgICwgaXRlbS5jb250ZW50LCBpdGVtLm9wdGlvbnMpO1xuICB9KTtcbiAgcXVldWUgPSBbXTtcbn0pLm9uKDNcbi8qIFdpbGxVbm1vdW50ICovXG4sIGZ1bmN0aW9uIChjb250YWluZXJJbnN0YW5jZSkge1xuICBjb250YWluZXJzW1wiZGVsZXRlXCJdKGNvbnRhaW5lckluc3RhbmNlLmNvbnRhaW5lcklkIHx8IGNvbnRhaW5lckluc3RhbmNlKTtcblxuICBpZiAoY29udGFpbmVycy5zaXplID09PSAwKSB7XG4gICAgZXZlbnRNYW5hZ2VyLm9mZigwXG4gICAgLyogU2hvdyAqL1xuICAgICkub2ZmKDFcbiAgICAvKiBDbGVhciAqL1xuICAgICkub2ZmKDVcbiAgICAvKiBDbGVhcldhaXRpbmdRdWV1ZSAqL1xuICAgICk7XG4gIH1cblxuICBpZiAoY2FuVXNlRG9tICYmIGNvbnRhaW5lckRvbU5vZGUpIHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGNvbnRhaW5lckRvbU5vZGUpO1xuICB9XG59KTtcblxuZXhwb3J0IHsgQm91bmNlLCBGbGlwLCBTbGlkZSwgVG9hc3RDb250YWluZXIsIFpvb20sIGNvbGxhcHNlVG9hc3QsIGNzc1RyYW5zaXRpb24sIHRvYXN0LCB1c2VUb2FzdCwgdXNlVG9hc3RDb250YWluZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXRvYXN0aWZ5LmVzbS5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7TGlua30gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7RmxpcCwgdG9hc3QsIFRvYXN0Q29udGFpbmVyfSBmcm9tICdyZWFjdC10b2FzdGlmeSc7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmNvbnN0IEFQSV9VUkwgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArIFwiL2FwaS92MS9sZWZ0cy9cIjtcblxuY2xhc3MgSW5kZXggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIG1lbnU6IFwiXCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoQVBJX1VSTCArICdpbmRleCcpO1xuICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe21lbnU6IHJlc3BvbnNlLmRhdGEubWVudSwgaXNMb2FkaW5nOiBmYWxzZX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9hc3QuZXJyb3IocmVzcG9uc2UuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHttZW51fSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibWV0aXNtZW51IGxpc3QtdW5zdHlsZWRcIiBpZD17J3NpZGUtbWVudSd9PlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbWVudT8ubGVuZ3RoID4gMCAmJiBtZW51Lm1hcCgoaXRlbSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2tleX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2l0ZW0/LmNoaWxkcmVuPy5sZW5ndGggPT09IDAgPyBpdGVtLnVybCA6IFwiI1wifSBjbGFzc05hbWU9e2l0ZW0/LmNoaWxkcmVuPy5sZW5ndGggPiAwID8gXCJoYXMtYXJyb3cgd2F2ZXMtZWZmZWN0XCIgOiBcIndhdmVzLWVmZmVjdFwifSBhcmlhLWV4cGFuZGVkPXtmYWxzZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9e1wibmF2LWljb24gXCIraXRlbS5pY29ufS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJzdWItbWVudSBtbS1jb2xsYXBzZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0/LmNoaWxkcmVuPy5sZW5ndGggPiAwICYmIGl0ZW0uY2hpbGRyZW4ubWFwKChjaGlsZCwgY2hpbGRLZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2NoaWxkS2V5fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtjaGlsZC51cmx9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9e1wibmF2LWljb24gXCIrY2hpbGQuaWNvbn0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hpbGQubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEluZGV4O1xuIiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQkMSA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQkMShcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoaGlzdG9yeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5oaXN0b3J5XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGhpc3RvcnlDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgIHZhciB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSwgY3VycmVudExvY2F0aW9uKTtcbiAgICB2YXIgcGF0aCA9IHRvTG9jYXRpb24ucGF0aG5hbWU7IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICAgIHZhciBtYXRjaCA9IGVzY2FwZWRQYXRoID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge3JlbmRlcn0gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IExlZnQgZnJvbSAnLi9tb2R1bGVzL0xlZnRNZW51JztcbmltcG9ydCB7QnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBTd2l0Y2h9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuY29uc3QgUEFUSE5BTUUgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyaW5nKDAsMyk7XG5jb25zdCBhcHAgPSAoXG4gICAgPFJvdXRlcj5cbiAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBjb21wYWN0IGNvbXBvbmVudD17TGVmdH0vPlxuICAgICAgICA8L1N3aXRjaD5cbiAgICA8L1JvdXRlcj5cbik7XG5cbnJlbmRlcihhcHAsIHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2lkZWJhci1tZW51JykpOyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidXRpbHMiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwiZGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiaGVhZGVycyIsInJlc3BvbnNlVHlwZSIsImlzRm9ybURhdGEiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ1cmwiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJvcGVuIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJzZXRUaW1lb3V0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwidHJhbnNpdGlvbmFsIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwidW5kZWZpbmVkIiwieHNyZkhlYWRlck5hbWUiLCJmb3JFYWNoIiwidmFsIiwia2V5IiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaXNVbmRlZmluZWQiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsInRoZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJiaW5kIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsInByb3RvdHlwZSIsImV4dGVuZCIsImF4aW9zIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJkZWZhdWx0cyIsIkNhbmNlbCIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsImRlZmF1bHQiLCJtZXNzYWdlIiwidGhpcyIsInRvU3RyaW5nIiwiX19DQU5DRUxfXyIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJ0b2tlbiIsInJlYXNvbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJzb3VyY2UiLCJjIiwidmFsdWUiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0b3JzIiwiaW50ZXJjZXB0b3JzIiwiYXJndW1lbnRzIiwiYXNzZXJ0T3B0aW9ucyIsInNpbGVudEpTT05QYXJzaW5nIiwiYm9vbGVhbiIsImZvcmNlZEpTT05QYXJzaW5nIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJ1bldoZW4iLCJzeW5jaHJvbm91cyIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsInB1c2giLCJjaGFpbiIsIkFycmF5IiwiYXBwbHkiLCJjb25jYXQiLCJsZW5ndGgiLCJzaGlmdCIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImVycm9yIiwiZ2V0VXJpIiwicmVwbGFjZSIsImhhbmRsZXJzIiwidXNlIiwib3B0aW9ucyIsImVqZWN0IiwiaWQiLCJmbiIsImgiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJlbmhhbmNlRXJyb3IiLCJjb2RlIiwiRXJyb3IiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsImNhbGwiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0b0pTT04iLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiZGlyZWN0TWVyZ2VLZXlzIiwiZ2V0TWVyZ2VkVmFsdWUiLCJ0YXJnZXQiLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsInNsaWNlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJheGlvc0tleXMiLCJvdGhlcktleXMiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwidmFsaWRhdGVTdGF0dXMiLCJmbnMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJwcm9jZXNzIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNPYmplY3QiLCJyYXdWYWx1ZSIsInBhcnNlciIsImVuY29kZXIiLCJpc1N0cmluZyIsIkpTT04iLCJwYXJzZSIsInRyaW0iLCJlIiwic3RyaW5naWZ5Iiwic3RyaW5naWZ5U2FmZWx5Iiwic3RyaWN0SlNPTlBhcnNpbmciLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInRoaXNBcmciLCJhcmdzIiwiaSIsImVuY29kZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImpvaW4iLCJoYXNobWFya0luZGV4IiwicmVsYXRpdmVVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJkb2N1bWVudCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwidGVzdCIsInBheWxvYWQiLCJvcmlnaW5VUkwiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJjcmVhdGVFbGVtZW50IiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJub3JtYWxpemVkTmFtZSIsImlnbm9yZUR1cGxpY2F0ZU9mIiwic3BsaXQiLCJsaW5lIiwic3Vic3RyIiwiY2FsbGJhY2siLCJhcnIiLCJwa2ciLCJ0eXBlIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJjdXJyZW50VmVyQXJyIiwidmVyc2lvbiIsImlzT2xkZXJWZXJzaW9uIiwidGhhblZlcnNpb24iLCJwa2dWZXJzaW9uQXJyIiwiZGVzdFZlciIsImlzRGVwcmVjYXRlZCIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwib3B0cyIsImNvbnNvbGUiLCJ3YXJuIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwicmVzdWx0IiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Z1bmN0aW9uIiwib2JqIiwibCIsImhhc093blByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJGb3JtRGF0YSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInByb2R1Y3QiLCJhc3NpZ25WYWx1ZSIsImEiLCJiIiwic3RyIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwibiIsInRlc3QzIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInMiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwiZ3JvdXBzIiwicHJlZml4IiwiZGVsaW1pdGVyIiwib3B0aW9uYWwiLCJyZXBlYXQiLCJwYXJ0aWFsIiwiYXN0ZXJpc2siLCJwYXR0ZXJuIiwiYXR0YWNoS2V5cyIsInJlZ2V4cFRvUmVnZXhwIiwiZmxhZ3MiLCJhcnJheVRvUmVnZXhwIiwidG9rZW5zVG9SZWdFeHAiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJpbmRleCIsImRlZmF1bHREZWxpbWl0ZXIiLCJleGVjIiwibSIsImVzY2FwZWQiLCJvZmZzZXQiLCJuZXh0IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsIm1hdGNoZXMiLCJwcmV0dHkiLCJzZWdtZW50IiwiaiIsInJlIiwic2Vuc2l0aXZlIiwic3RyaWN0IiwiZW5kIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJmdW5jIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImFhIiwiciIsInkiLCJiYSIsIlNldCIsImNhIiwiZGEiLCJlYSIsImFkZCIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJCIiwiZCIsImYiLCJnIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJEIiwib2EiLCJwYSIsInFhIiwibWEiLCJpc05hTiIsIm5hIiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiU3ltYm9sIiwiZm9yIiwiRSIsIk1hIiwiS2EiLCJpdGVyYXRvciIsIkxhIiwiTmEiLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiayIsIlFhIiwidGFnIiwiX3JlbmRlciIsIlJhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCIkYSIsImFiIiwiYmIiLCJjYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJkYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzdHlsZSIsInNldFByb3BlcnR5Iiwic3Vic3RyaW5nIiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwiaXMiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUmIiLCJvbkVycm9yIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiTWF0aCIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSmQiLCJjbGlwYm9hcmREYXRhIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUmQiLCJsb2NhbGUiLCJ3aGljaCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInJhbmdlIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm5leHRTaWJsaW5nIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsImxpc3RlbmVyIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJwYXNzaXZlIiwiTmIiLCJ4IiwidyIsInoiLCJ1IiwicSIsInQiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsIkoiLCJLIiwiUSIsIkwiLCJqZSIsImNoYXIiLCJrZSIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInBmIiwiY2xlYXJUaW1lb3V0IiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsImNoaWxkIiwiemYiLCJBZiIsIkJmIiwiY3VycmVudCIsIkgiLCJJIiwiQ2YiLCJNIiwiTiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiTyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsIl9jdXJyZW50VmFsdWUiLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJBZyIsIkJnIiwiQ2ciLCJBIiwicCIsIkMiLCJEZyIsIkVnIiwiRmciLCJDb21wb25lbnQiLCJyZWZzIiwiR2ciLCJLZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkhnIiwiSWciLCJKZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTWciLCJzdGF0ZSIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0Iiwic2libGluZyIsIlRnIiwiVWciLCJtb2RlIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJkb25lIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJmaCIsImdoIiwiaGgiLCJQIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIndoIiwieGgiLCJSIiwiUyIsIlQiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJ1c2VTdGF0ZSIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwidXNlRWZmZWN0Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsImJhc2VMYW5lcyIsIm5pIiwib2kiLCJwaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInFpIiwicmkiLCJwZW5kaW5nQ29udGV4dCIsIkJpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlYiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwiTmkiLCJPaSIsIldlYWtNYXAiLCJQaSIsIlFpIiwiUmkiLCJTaSIsImNvbXBvbmVudERpZENhdGNoIiwiVGkiLCJjb21wb25lbnRTdGFjayIsIlVpIiwiV2Vha1NldCIsIlZpIiwiV2kiLCJYaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiWWkiLCJaaSIsIiRpIiwiZm9jdXMiLCJhaiIsImRpc3BsYXkiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjaiIsImRqIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaWoiLCJqaiIsImtqIiwibGoiLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJYaiIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiVmoiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImJjIiwiY2MiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInlrIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjaGVja0RDRSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIndyaXRhYmxlIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJhcmciLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmbG9vciIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsIm8iLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX3NldFByb3RvdHlwZU9mIiwiX3R5cGVvZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfZ2V0UHJvdG90eXBlT2YiLCJ0b1ZhbCIsIm1peCIsInRtcCIsImlzTnVtIiwiaXNCb29sIiwiaXNTdHIiLCJpc0ZuIiwicGFyc2VDbGFzc05hbWUiLCJpc1RvYXN0SWRWYWxpZCIsInRvYXN0SWQiLCJjYW5Vc2VEb20iLCJjYW5CZVJlbmRlcmVkIiwiUE9TSVRJT04iLCJUT1BfTEVGVCIsIlRPUF9SSUdIVCIsIlRPUF9DRU5URVIiLCJCT1RUT01fTEVGVCIsIkJPVFRPTV9SSUdIVCIsIkJPVFRPTV9DRU5URVIiLCJUWVBFIiwiSU5GTyIsIlNVQ0NFU1MiLCJXQVJOSU5HIiwiRVJST1IiLCJERUZBVUxUIiwiREFSSyIsImNzc1RyYW5zaXRpb24iLCJfcmVmIiwiZW50ZXIiLCJleGl0IiwiX3JlZiRhcHBlbmRQb3NpdGlvbiIsImFwcGVuZFBvc2l0aW9uIiwiX3JlZiRjb2xsYXBzZSIsImNvbGxhcHNlIiwiX3JlZiRjb2xsYXBzZUR1cmF0aW9uIiwiY29sbGFwc2VEdXJhdGlvbiIsIl9yZWYyIiwicG9zaXRpb24iLCJwcmV2ZW50RXhpdFRyYW5zaXRpb24iLCJub2RlUmVmIiwiaXNJbiIsImVudGVyQ2xhc3NOYW1lIiwiZXhpdENsYXNzTmFtZSIsImJhc2VDbGFzc05hbWUiLCJhbmltYXRpb25TdGVwIiwib25FbnRlcmVkIiwiY2xhc3NOYW1lIiwib25FeGl0ZWQiLCJkdXJhdGlvbiIsInNjcm9sbEhlaWdodCIsIm1pbkhlaWdodCIsInBhZGRpbmciLCJtYXJnaW4iLCJjb2xsYXBzZVRvYXN0Iiwib25FeGl0IiwiZXZlbnRNYW5hZ2VyIiwibGlzdCIsImVtaXRRdWV1ZSIsIm9uIiwib2ZmIiwiY2FuY2VsRW1pdCIsInRpbWVycyIsImVtaXQiLCJfdGhpcyIsIl9sZW4iLCJfa2V5IiwidGltZXIiLCJ1c2VLZWVwZXIiLCJyZWZyZXNoIiwicmVkdWNlciIsInN0YWxlSWQiLCJnZXRYIiwiZ2V0WSIsIkNsb3NlQnV0dG9uIiwiY2xvc2VUb2FzdCIsIl9yZWYkYXJpYUxhYmVsIiwiYXJpYUxhYmVsIiwidmlld0JveCIsImZpbGxSdWxlIiwiUHJvZ3Jlc3NCYXIiLCJfY3giLCJfYW5pbWF0aW9uRXZlbnQiLCJpc1J1bm5pbmciLCJoaWRlIiwidXNlclN0eWxlIiwiY29udHJvbGxlZFByb2dyZXNzIiwicHJvZ3Jlc3MiLCJydGwiLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvblBsYXlTdGF0ZSIsInRyYW5zZm9ybSIsImRlZmF1bHRDbGFzc05hbWUiLCJjbGFzc05hbWVzIiwiYW5pbWF0aW9uRXZlbnQiLCJyb2xlIiwiVG9hc3QiLCJfdXNlVG9hc3QiLCJfdXNlU3RhdGUiLCJzZXRJc1J1bm5pbmciLCJfdXNlU3RhdGUyIiwic2V0UHJldmVudEV4aXRUcmFuc2l0aW9uIiwidG9hc3RSZWYiLCJkcmFnIiwiZGVsdGEiLCJyZW1vdmFsRGlzdGFuY2UiLCJjYW5DbG9zZU9uQ2xpY2siLCJjYW5EcmFnIiwiYm91bmRpbmdSZWN0Iiwic3luY1Byb3BzIiwiYXV0b0Nsb3NlIiwicGF1c2VPbkhvdmVyIiwiY2xvc2VPbkNsaWNrIiwib25EcmFnU3RhcnQiLCJkcmFnZ2FibGUiLCJ0b2FzdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRyYWdnYWJsZURpcmVjdGlvbiIsIm9mZnNldFdpZHRoIiwiZHJhZ2dhYmxlUGVyY2VudCIsIm9mZnNldEhlaWdodCIsIm9uRHJhZ1RyYW5zaXRpb25FbmQiLCJfZHJhZyRib3VuZGluZ1JlY3QiLCJib3R0b20iLCJyaWdodCIsInBhdXNlVG9hc3QiLCJwbGF5VG9hc3QiLCJvbkRyYWdNb3ZlIiwiYWJzIiwib25EcmFnRW5kIiwib25PcGVuIiwib25DbG9zZSIsInBhdXNlT25Gb2N1c0xvc3MiLCJoYXNGb2N1cyIsImV2ZW50SGFuZGxlcnMiLCJvbk1vdXNlRG93biIsIm9uVG91Y2hTdGFydCIsIm9uTW91c2VVcCIsIm9uVG91Y2hFbmQiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJ1c2VUb2FzdCIsImNsb3NlQnV0dG9uIiwiaGlkZVByb2dyZXNzQmFyIiwiVHJhbnNpdGlvbiIsImJvZHlDbGFzc05hbWUiLCJib2R5U3R5bGUiLCJwcm9ncmVzc0NsYXNzTmFtZSIsInByb2dyZXNzU3R5bGUiLCJ1cGRhdGVJZCIsImRlbGV0ZVRvYXN0IiwiY3NzQ2xhc3NlcyIsImlzUHJvZ3Jlc3NDb250cm9sbGVkIiwicmVuZGVyQ2xvc2VCdXR0b24iLCJUb2FzdENvbnRhaW5lciIsIl91c2VUb2FzdENvbnRhaW5lciIsIl91c2VSZWR1Y2VyMiIsImNvbnRhaW5lclJlZiIsInRvYXN0Q291bnQiLCJjb2xsZWN0aW9uIiwidG9hc3RLZXkiLCJkaXNwbGF5ZWRUb2FzdCIsImNvbnRhaW5lcklkIiwiaXNUb2FzdEFjdGl2ZSIsImdldFRvYXN0IiwiY2xlYXJXYWl0aW5nUXVldWUiLCJsaW1pdCIsInJlbW92ZVRvYXN0IiwiZGVxdWV1ZVRvYXN0IiwiX3F1ZXVlJHNoaWZ0IiwiYXBwZW5kVG9hc3QiLCJ0b2FzdENvbnRlbnQiLCJ0b2FzdFByb3BzIiwiYnVpbGRUb2FzdCIsIl9yZWYzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiZW5hYmxlTXVsdGlDb250YWluZXIiLCJpc05vdFZhbGlkIiwiaXNOb3RBblVwZGF0ZSIsInRvYXN0QXV0b0Nsb3NlIiwiY29udGFpbmVyQXV0b0Nsb3NlIiwidG9hc3RDbGFzc05hbWUiLCJ0b2FzdFN0eWxlIiwicXVldWVMZW4iLCJmcmVlU2xvdCIsInRvRGVxdWV1ZSIsInJlbW92ZUZyb21Db2xsZWN0aW9uIiwiZ2V0VG9hc3RUb1JlbmRlciIsInRvYXN0VG9SZW5kZXIiLCJ0b2FzdExpc3QiLCJuZXdlc3RPblRvcCIsIl90b2FzdCIsInVzZVRvYXN0Q29udGFpbmVyIiwiZ2V0Q2xhc3NOYW1lIiwiY29udGFpbmVyU3R5bGUiLCJwb2ludGVyRXZlbnRzIiwibGF0ZXN0SW5zdGFuY2UiLCJjb250YWluZXJEb21Ob2RlIiwiY29udGFpbmVyQ29uZmlnIiwiY29udGFpbmVycyIsImdlbmVyYXRlVG9hc3RJZCIsImdldFRvYXN0SWQiLCJkaXNwYXRjaFRvYXN0IiwibWVyZ2VPcHRpb25zIiwiY3JlYXRlVG9hc3RCeVR5cGUiLCJzdWNjZXNzIiwid2FybmluZyIsImRhcmsiLCJkaXNtaXNzIiwiaXNBY3RpdmUiLCJjb250YWluZXIiLCJ1cGRhdGUiLCJvbGRPcHRpb25zIiwib2xkQ29udGVudCIsIm5leHRPcHRpb25zIiwib25DaGFuZ2UiLCJjb25maWd1cmUiLCJjb250YWluZXJJbnN0YW5jZSIsIml0ZW0iLCJBUElfVVJMIiwiSW5kZXgiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJpc0xvYWRpbmciLCJtZW51IiwiX2lzTW91bnRlZCIsImljb24iLCJjaGlsZEtleSIsIlJlYWN0IiwiX2luaGVyaXRzTG9vc2UiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwiY29uZGl0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwidXAiLCJwYXJ0IiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY29tbW9uanNHbG9iYWwiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJoYW5kbGVyIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiZW1pdHRlciIsIl9wcm90byIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJoaXN0b3J5Q29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCQxIiwiUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInJlZHVjZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJSb3V0ZSIsImNvbnRleHQkMSIsImNvbXB1dGVkTWF0Y2giLCJfdGhpcyRwcm9wcyIsIlN3aXRjaCIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJhcHAiLCJjb21wYWN0IiwiZ2V0RWxlbWVudEJ5SWQiXSwic291cmNlUm9vdCI6IiJ9